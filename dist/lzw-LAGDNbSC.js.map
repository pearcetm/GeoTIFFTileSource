{"version":3,"file":"lzw-LAGDNbSC.js","sources":["../node_modules/geotiff/dist-module/compression/lzw.js"],"sourcesContent":["import BaseDecoder from './basedecoder.js';\n\nconst MIN_BITS = 9;\nconst CLEAR_CODE = 256; // clear code\nconst EOI_CODE = 257; // end of information\nconst MAX_BYTELENGTH = 12;\n\nfunction getByte(array, position, length) {\n  const d = position % 8;\n  const a = Math.floor(position / 8);\n  const de = 8 - d;\n  const ef = (position + length) - ((a + 1) * 8);\n  let fg = (8 * (a + 2)) - (position + length);\n  const dg = ((a + 2) * 8) - position;\n  fg = Math.max(0, fg);\n  if (a >= array.length) {\n    console.warn('ran off the end of the buffer before finding EOI_CODE (end on input code)');\n    return EOI_CODE;\n  }\n  let chunk1 = array[a] & ((2 ** (8 - d)) - 1);\n  chunk1 <<= (length - de);\n  let chunks = chunk1;\n  if (a + 1 < array.length) {\n    let chunk2 = array[a + 1] >>> fg;\n    chunk2 <<= Math.max(0, (length - dg));\n    chunks += chunk2;\n  }\n  if (ef > 8 && a + 2 < array.length) {\n    const hi = ((a + 3) * 8) - (position + length);\n    const chunk3 = array[a + 2] >>> hi;\n    chunks += chunk3;\n  }\n  return chunks;\n}\n\nfunction appendReversed(dest, source) {\n  for (let i = source.length - 1; i >= 0; i--) {\n    dest.push(source[i]);\n  }\n  return dest;\n}\n\nfunction decompress(input) {\n  const dictionaryIndex = new Uint16Array(4093);\n  const dictionaryChar = new Uint8Array(4093);\n  for (let i = 0; i <= 257; i++) {\n    dictionaryIndex[i] = 4096;\n    dictionaryChar[i] = i;\n  }\n  let dictionaryLength = 258;\n  let byteLength = MIN_BITS;\n  let position = 0;\n\n  function initDictionary() {\n    dictionaryLength = 258;\n    byteLength = MIN_BITS;\n  }\n  function getNext(array) {\n    const byte = getByte(array, position, byteLength);\n    position += byteLength;\n    return byte;\n  }\n  function addToDictionary(i, c) {\n    dictionaryChar[dictionaryLength] = c;\n    dictionaryIndex[dictionaryLength] = i;\n    dictionaryLength++;\n    return dictionaryLength - 1;\n  }\n  function getDictionaryReversed(n) {\n    const rev = [];\n    for (let i = n; i !== 4096; i = dictionaryIndex[i]) {\n      rev.push(dictionaryChar[i]);\n    }\n    return rev;\n  }\n\n  const result = [];\n  initDictionary();\n  const array = new Uint8Array(input);\n  let code = getNext(array);\n  let oldCode;\n  while (code !== EOI_CODE) {\n    if (code === CLEAR_CODE) {\n      initDictionary();\n      code = getNext(array);\n      while (code === CLEAR_CODE) {\n        code = getNext(array);\n      }\n\n      if (code === EOI_CODE) {\n        break;\n      } else if (code > CLEAR_CODE) {\n        throw new Error(`corrupted code at scanline ${code}`);\n      } else {\n        const val = getDictionaryReversed(code);\n        appendReversed(result, val);\n        oldCode = code;\n      }\n    } else if (code < dictionaryLength) {\n      const val = getDictionaryReversed(code);\n      appendReversed(result, val);\n      addToDictionary(oldCode, val[val.length - 1]);\n      oldCode = code;\n    } else {\n      const oldVal = getDictionaryReversed(oldCode);\n      if (!oldVal) {\n        throw new Error(`Bogus entry. Not in dictionary, ${oldCode} / ${dictionaryLength}, position: ${position}`);\n      }\n      appendReversed(result, oldVal);\n      result.push(oldVal[oldVal.length - 1]);\n      addToDictionary(oldCode, oldVal[oldVal.length - 1]);\n      oldCode = code;\n    }\n\n    if (dictionaryLength + 1 >= (2 ** byteLength)) {\n      if (byteLength === MAX_BYTELENGTH) {\n        oldCode = undefined;\n      } else {\n        byteLength++;\n      }\n    }\n    code = getNext(array);\n  }\n  return new Uint8Array(result);\n}\n\nexport default class LZWDecoder extends BaseDecoder {\n  decodeBlock(buffer) {\n    return decompress(buffer, false).buffer;\n  }\n}\n"],"names":["MIN_BITS","CLEAR_CODE","EOI_CODE","MAX_BYTELENGTH","getByte","array","position","length","d","a","de","ef","fg","dg","chunk1","chunks","chunk2","hi","chunk3","appendReversed","dest","source","i","decompress","input","dictionaryIndex","dictionaryChar","dictionaryLength","byteLength","initDictionary","getNext","byte","addToDictionary","c","getDictionaryReversed","n","rev","result","code","oldCode","val","oldVal","LZWDecoder","BaseDecoder","buffer"],"mappings":"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","x_google_ignoreList":[0]}