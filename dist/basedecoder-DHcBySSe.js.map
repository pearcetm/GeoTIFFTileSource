{"version":3,"file":"basedecoder-DHcBySSe.js","sources":["../node_modules/geotiff/dist-module/predictor.js","../node_modules/geotiff/dist-module/compression/basedecoder.js"],"sourcesContent":["function decodeRowAcc(row, stride) {\n  let length = row.length - stride;\n  let offset = 0;\n  do {\n    for (let i = stride; i > 0; i--) {\n      row[offset + stride] += row[offset];\n      offset++;\n    }\n\n    length -= stride;\n  } while (length > 0);\n}\n\nfunction decodeRowFloatingPoint(row, stride, bytesPerSample) {\n  let index = 0;\n  let count = row.length;\n  const wc = count / bytesPerSample;\n\n  while (count > stride) {\n    for (let i = stride; i > 0; --i) {\n      row[index + stride] += row[index];\n      ++index;\n    }\n    count -= stride;\n  }\n\n  const copy = row.slice();\n  for (let i = 0; i < wc; ++i) {\n    for (let b = 0; b < bytesPerSample; ++b) {\n      row[(bytesPerSample * i) + b] = copy[((bytesPerSample - b - 1) * wc) + i];\n    }\n  }\n}\n\nexport function applyPredictor(block, predictor, width, height, bitsPerSample,\n  planarConfiguration) {\n  if (!predictor || predictor === 1) {\n    return block;\n  }\n\n  for (let i = 0; i < bitsPerSample.length; ++i) {\n    if (bitsPerSample[i] % 8 !== 0) {\n      throw new Error('When decoding with predictor, only multiple of 8 bits are supported.');\n    }\n    if (bitsPerSample[i] !== bitsPerSample[0]) {\n      throw new Error('When decoding with predictor, all samples must have the same size.');\n    }\n  }\n\n  const bytesPerSample = bitsPerSample[0] / 8;\n  const stride = planarConfiguration === 2 ? 1 : bitsPerSample.length;\n\n  for (let i = 0; i < height; ++i) {\n    // Last strip will be truncated if height % stripHeight != 0\n    if (i * stride * width * bytesPerSample >= block.byteLength) {\n      break;\n    }\n    let row;\n    if (predictor === 2) { // horizontal prediction\n      switch (bitsPerSample[0]) {\n        case 8:\n          row = new Uint8Array(\n            block, i * stride * width * bytesPerSample, stride * width * bytesPerSample,\n          );\n          break;\n        case 16:\n          row = new Uint16Array(\n            block, i * stride * width * bytesPerSample, stride * width * bytesPerSample / 2,\n          );\n          break;\n        case 32:\n          row = new Uint32Array(\n            block, i * stride * width * bytesPerSample, stride * width * bytesPerSample / 4,\n          );\n          break;\n        default:\n          throw new Error(`Predictor 2 not allowed with ${bitsPerSample[0]} bits per sample.`);\n      }\n      decodeRowAcc(row, stride, bytesPerSample);\n    } else if (predictor === 3) { // horizontal floating point\n      row = new Uint8Array(\n        block, i * stride * width * bytesPerSample, stride * width * bytesPerSample,\n      );\n      decodeRowFloatingPoint(row, stride, bytesPerSample);\n    }\n  }\n  return block;\n}\n","import { applyPredictor } from '../predictor.js';\n\nexport default class BaseDecoder {\n  async decode(fileDirectory, buffer) {\n    const decoded = await this.decodeBlock(buffer);\n    const predictor = fileDirectory.Predictor || 1;\n    if (predictor !== 1) {\n      const isTiled = !fileDirectory.StripOffsets;\n      const tileWidth = isTiled ? fileDirectory.TileWidth : fileDirectory.ImageWidth;\n      const tileHeight = isTiled ? fileDirectory.TileLength : (\n        fileDirectory.RowsPerStrip || fileDirectory.ImageLength\n      );\n      return applyPredictor(\n        decoded, predictor, tileWidth, tileHeight, fileDirectory.BitsPerSample,\n        fileDirectory.PlanarConfiguration,\n      );\n    }\n    return decoded;\n  }\n}\n"],"names":["decodeRowAcc","row","stride","length","offset","i","decodeRowFloatingPoint","bytesPerSample","index","count","wc","copy","b","applyPredictor","block","predictor","width","height","bitsPerSample","planarConfiguration","BaseDecoder","fileDirectory","buffer","decoded","isTiled","tileWidth","tileHeight"],"mappings":"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","x_google_ignoreList":[0,1]}