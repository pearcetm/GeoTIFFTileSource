{"version":3,"file":"lerc-wpYx4tID.js","sources":["../node_modules/lerc/LercDecode.js","../node_modules/zstddec/dist/zstddec.modern.js","../node_modules/geotiff/dist-module/compression/lerc.js"],"sourcesContent":["/* jshint forin: false, bitwise: false */\n/*\nCopyright 2015-2021 Esri\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\nA copy of the license and additional notices are located with the\nsource distribution at:\n\nhttp://github.com/Esri/lerc/\n\nContributors:  Johannes Schmid, (LERC v1)\n               Chayanika Khatua, (LERC v1)\n               Wenxue Ju (LERC v1, v2.x)\n*/\n\n/* Copyright 2015-2021 Esri. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 @preserve */\n\n/**\n * a module for decoding LERC blobs\n * @module Lerc\n */\n(function() {\n  //this decoder supports all lerc versions, each version has its own class (LercDecode and Lerc2Decode). \n  //the exported module handles format variation autoamtically.\n\n  //the original LercDecode for Version 1\n  var LercDecode = (function() {\n\n    // Note: currently, this module only has an implementation for decoding LERC data, not encoding. The name of\n    // the class was chosen to be future proof.\n\n    var CntZImage = {};\n\n    CntZImage.defaultNoDataValue = -3.4027999387901484e+38; // smallest Float32 value\n\n    /**\n     * Decode a LERC byte stream and return an object containing the pixel data and some required and optional\n     * information about it, such as the image's width and height.\n     *\n     * @param {ArrayBuffer} input The LERC input byte stream\n     * @param {object} [options] Decoding options, containing any of the following properties:\n     * @config {number} [inputOffset = 0]\n     *        Skip the first inputOffset bytes of the input byte stream. A valid LERC file is expected at that position.\n     * @config {Uint8Array} [encodedMask = null]\n     *        If specified, the decoder will not read mask information from the input and use the specified encoded\n     *        mask data instead. Mask header/data must not be present in the LERC byte stream in this case.\n     * @config {number} [noDataValue = LercCode.defaultNoDataValue]\n     *        Pixel value to use for masked pixels.\n     * @config {ArrayBufferView|Array} [pixelType = Float32Array]\n     *        The desired type of the pixelData array in the return value. Note that it is the caller's responsibility to\n     *        provide an appropriate noDataValue if the default pixelType is overridden.\n     * @config {boolean} [returnMask = false]\n     *        If true, the return value will contain a maskData property of type Uint8Array which has one element per\n     *        pixel, the value of which is 1 or 0 depending on whether that pixel's data is present or masked. If the\n     *        input LERC data does not contain a mask, maskData will not be returned.\n     * @config {boolean} [returnEncodedMask = false]\n     *        If true, the return value will contain a encodedMaskData property, which can be passed into encode() as\n     *        encodedMask.\n     * @config {boolean} [returnFileInfo = false]\n     *        If true, the return value will have a fileInfo property that contains metadata obtained from the\n     *        LERC headers and the decoding process.\n     * @config {boolean} [computeUsedBitDepths = false]\n     *        If true, the fileInfo property in the return value will contain the set of all block bit depths\n     *        encountered during decoding. Will only have an effect if returnFileInfo option is true.\n     * @returns {{width, height, pixelData, minValue, maxValue, noDataValue, maskData, encodedMaskData, fileInfo}}\n     */\n    CntZImage.decode = function(input, options) {\n      options = options || {};\n\n      var skipMask = options.encodedMaskData || (options.encodedMaskData === null);\n      var parsedData = parse(input, options.inputOffset || 0, skipMask);\n\n      var noDataValue = (options.noDataValue !== null) ? options.noDataValue : CntZImage.defaultNoDataValue;\n\n      var uncompressedData = uncompressPixelValues(parsedData, options.pixelType || Float32Array,\n        options.encodedMaskData, noDataValue, options.returnMask);\n\n      var result = {\n        width: parsedData.width,\n        height: parsedData.height,\n        pixelData: uncompressedData.resultPixels,\n        minValue: uncompressedData.minValue,\n        maxValue: parsedData.pixels.maxValue,\n        noDataValue: noDataValue\n      };\n\n      if (uncompressedData.resultMask) {\n        result.maskData = uncompressedData.resultMask;\n      }\n\n      if (options.returnEncodedMask && parsedData.mask) {\n        result.encodedMaskData = parsedData.mask.bitset ? parsedData.mask.bitset : null;\n      }\n\n      if (options.returnFileInfo) {\n        result.fileInfo = formatFileInfo(parsedData);\n        if (options.computeUsedBitDepths) {\n          result.fileInfo.bitDepths = computeUsedBitDepths(parsedData);\n        }\n      }\n\n      return result;\n    };\n\n    var uncompressPixelValues = function(data, TypedArrayClass, maskBitset, noDataValue, storeDecodedMask) {\n      var blockIdx = 0;\n      var numX = data.pixels.numBlocksX;\n      var numY = data.pixels.numBlocksY;\n      var blockWidth = Math.floor(data.width / numX);\n      var blockHeight = Math.floor(data.height / numY);\n      var scale = 2 * data.maxZError;\n      var minValue = Number.MAX_VALUE, currentValue;\n      maskBitset = maskBitset || ((data.mask) ? data.mask.bitset : null);\n\n      var resultPixels, resultMask;\n      resultPixels = new TypedArrayClass(data.width * data.height);\n      if (storeDecodedMask && maskBitset) {\n        resultMask = new Uint8Array(data.width * data.height);\n      }\n      var blockDataBuffer = new Float32Array(blockWidth * blockHeight);\n\n      var xx, yy;\n      for (var y = 0; y <= numY; y++) {\n        var thisBlockHeight = (y !== numY) ? blockHeight : (data.height % numY);\n        if (thisBlockHeight === 0) {\n          continue;\n        }\n        for (var x = 0; x <= numX; x++) {\n          var thisBlockWidth = (x !== numX) ? blockWidth : (data.width % numX);\n          if (thisBlockWidth === 0) {\n            continue;\n          }\n\n          var outPtr = y * data.width * blockHeight + x * blockWidth;\n          var outStride = data.width - thisBlockWidth;\n\n          var block = data.pixels.blocks[blockIdx];\n\n          var blockData, blockPtr, constValue;\n          if (block.encoding < 2) {\n            // block is either uncompressed or bit-stuffed (encodings 0 and 1)\n            if (block.encoding === 0) {\n              // block is uncompressed\n              blockData = block.rawData;\n            } else {\n              // block is bit-stuffed\n              unstuff(block.stuffedData, block.bitsPerPixel, block.numValidPixels, block.offset, scale, blockDataBuffer, data.pixels.maxValue);\n              blockData = blockDataBuffer;\n            }\n            blockPtr = 0;\n          }\n          else if (block.encoding === 2) {\n            // block is all 0\n            constValue = 0;\n          }\n          else {\n            // block has constant value (encoding === 3)\n            constValue = block.offset;\n          }\n\n          var maskByte;\n          if (maskBitset) {\n            for (yy = 0; yy < thisBlockHeight; yy++) {\n              if (outPtr & 7) {\n                //\n                maskByte = maskBitset[outPtr >> 3];\n                maskByte <<= outPtr & 7;\n              }\n              for (xx = 0; xx < thisBlockWidth; xx++) {\n                if (!(outPtr & 7)) {\n                  // read next byte from mask\n                  maskByte = maskBitset[outPtr >> 3];\n                }\n                if (maskByte & 128) {\n                  // pixel data present\n                  if (resultMask) {\n                    resultMask[outPtr] = 1;\n                  }\n                  currentValue = (block.encoding < 2) ? blockData[blockPtr++] : constValue;\n                  minValue = minValue > currentValue ? currentValue : minValue;\n                  resultPixels[outPtr++] = currentValue;\n                } else {\n                  // pixel data not present\n                  if (resultMask) {\n                    resultMask[outPtr] = 0;\n                  }\n                  resultPixels[outPtr++] = noDataValue;\n                }\n                maskByte <<= 1;\n              }\n              outPtr += outStride;\n            }\n          } else {\n            // mask not present, simply copy block over\n            if (block.encoding < 2) {\n              // duplicating this code block for performance reasons\n              // blockData case:\n              for (yy = 0; yy < thisBlockHeight; yy++) {\n                for (xx = 0; xx < thisBlockWidth; xx++) {\n                  currentValue = blockData[blockPtr++];\n                  minValue = minValue > currentValue ? currentValue : minValue;\n                  resultPixels[outPtr++] = currentValue;\n                }\n                outPtr += outStride;\n              }\n            }\n            else {\n              // constValue case:\n              minValue = minValue > constValue ? constValue : minValue;\n              for (yy = 0; yy < thisBlockHeight; yy++) {\n                for (xx = 0; xx < thisBlockWidth; xx++) {\n                  resultPixels[outPtr++] = constValue;\n                }\n                outPtr += outStride;\n              }\n            }\n          }\n          if ((block.encoding === 1) && (blockPtr !== block.numValidPixels)) {\n            throw \"Block and Mask do not match\";\n          }\n          blockIdx++;\n        }\n      }\n\n      return {\n        resultPixels: resultPixels,\n        resultMask: resultMask,\n        minValue: minValue\n      };\n    };\n\n    var formatFileInfo = function(data) {\n      return {\n        \"fileIdentifierString\": data.fileIdentifierString,\n        \"fileVersion\": data.fileVersion,\n        \"imageType\": data.imageType,\n        \"height\": data.height,\n        \"width\": data.width,\n        \"maxZError\": data.maxZError,\n        \"eofOffset\": data.eofOffset,\n        \"mask\": data.mask ? {\n          \"numBlocksX\": data.mask.numBlocksX,\n          \"numBlocksY\": data.mask.numBlocksY,\n          \"numBytes\": data.mask.numBytes,\n          \"maxValue\": data.mask.maxValue\n        } : null,\n        \"pixels\": {\n          \"numBlocksX\": data.pixels.numBlocksX,\n          \"numBlocksY\": data.pixels.numBlocksY,\n          \"numBytes\": data.pixels.numBytes,\n          \"maxValue\": data.pixels.maxValue,\n          \"noDataValue\": data.noDataValue\n        }\n      };\n    };\n\n    var computeUsedBitDepths = function(data) {\n      var numBlocks = data.pixels.numBlocksX * data.pixels.numBlocksY;\n      var bitDepths = {};\n      for (var i = 0; i < numBlocks; i++) {\n        var block = data.pixels.blocks[i];\n        if (block.encoding === 0) {\n          bitDepths.float32 = true;\n        } else if (block.encoding === 1) {\n          bitDepths[block.bitsPerPixel] = true;\n        } else {\n          bitDepths[0] = true;\n        }\n      }\n\n      return Object.keys(bitDepths);\n    };\n\n    var parse = function(input, fp, skipMask) {\n      var data = {};\n\n      // File header\n      var fileIdView = new Uint8Array(input, fp, 10);\n      data.fileIdentifierString = String.fromCharCode.apply(null, fileIdView);\n      if (data.fileIdentifierString.trim() !== \"CntZImage\") {\n        throw \"Unexpected file identifier string: \" + data.fileIdentifierString;\n      }\n      fp += 10;\n      var view = new DataView(input, fp, 24);\n      data.fileVersion = view.getInt32(0, true);\n      data.imageType = view.getInt32(4, true);\n      data.height = view.getUint32(8, true);\n      data.width = view.getUint32(12, true);\n      data.maxZError = view.getFloat64(16, true);\n      fp += 24;\n\n      // Mask Header\n      if (!skipMask) {\n        view = new DataView(input, fp, 16);\n        data.mask = {};\n        data.mask.numBlocksY = view.getUint32(0, true);\n        data.mask.numBlocksX = view.getUint32(4, true);\n        data.mask.numBytes = view.getUint32(8, true);\n        data.mask.maxValue = view.getFloat32(12, true);\n        fp += 16;\n\n        // Mask Data\n        if (data.mask.numBytes > 0) {\n          var bitset = new Uint8Array(Math.ceil(data.width * data.height / 8));\n          view = new DataView(input, fp, data.mask.numBytes);\n          var cnt = view.getInt16(0, true);\n          var ip = 2, op = 0;\n          do {\n            if (cnt > 0) {\n              while (cnt--) { bitset[op++] = view.getUint8(ip++); }\n            } else {\n              var val = view.getUint8(ip++);\n              cnt = -cnt;\n              while (cnt--) { bitset[op++] = val; }\n            }\n            cnt = view.getInt16(ip, true);\n            ip += 2;\n          } while (ip < data.mask.numBytes);\n          if ((cnt !== -32768) || (op < bitset.length)) {\n            throw \"Unexpected end of mask RLE encoding\";\n          }\n          data.mask.bitset = bitset;\n          fp += data.mask.numBytes;\n        }\n        else if ((data.mask.numBytes | data.mask.numBlocksY | data.mask.maxValue) === 0) {  // Special case, all nodata\n          data.mask.bitset = new Uint8Array(Math.ceil(data.width * data.height / 8));\n        }\n      }\n\n      // Pixel Header\n      view = new DataView(input, fp, 16);\n      data.pixels = {};\n      data.pixels.numBlocksY = view.getUint32(0, true);\n      data.pixels.numBlocksX = view.getUint32(4, true);\n      data.pixels.numBytes = view.getUint32(8, true);\n      data.pixels.maxValue = view.getFloat32(12, true);\n      fp += 16;\n\n      var numBlocksX = data.pixels.numBlocksX;\n      var numBlocksY = data.pixels.numBlocksY;\n      // the number of blocks specified in the header does not take into account the blocks at the end of\n      // each row/column with a special width/height that make the image complete in case the width is not\n      // evenly divisible by the number of blocks.\n      var actualNumBlocksX = numBlocksX + ((data.width % numBlocksX) > 0 ? 1 : 0);\n      var actualNumBlocksY = numBlocksY + ((data.height % numBlocksY) > 0 ? 1 : 0);\n      data.pixels.blocks = new Array(actualNumBlocksX * actualNumBlocksY);\n      var blockI = 0;\n      for (var blockY = 0; blockY < actualNumBlocksY; blockY++) {\n        for (var blockX = 0; blockX < actualNumBlocksX; blockX++) {\n\n          // Block\n          var size = 0;\n          var bytesLeft = input.byteLength - fp;\n          view = new DataView(input, fp, Math.min(10, bytesLeft));\n          var block = {};\n          data.pixels.blocks[blockI++] = block;\n          var headerByte = view.getUint8(0); size++;\n          block.encoding = headerByte & 63;\n          if (block.encoding > 3) {\n            throw \"Invalid block encoding (\" + block.encoding + \")\";\n          }\n          if (block.encoding === 2) {\n            fp++;\n            continue;\n          }\n          if ((headerByte !== 0) && (headerByte !== 2)) {\n            headerByte >>= 6;\n            block.offsetType = headerByte;\n            if (headerByte === 2) {\n              block.offset = view.getInt8(1); size++;\n            } else if (headerByte === 1) {\n              block.offset = view.getInt16(1, true); size += 2;\n            } else if (headerByte === 0) {\n              block.offset = view.getFloat32(1, true); size += 4;\n            } else {\n              throw \"Invalid block offset type\";\n            }\n\n            if (block.encoding === 1) {\n              headerByte = view.getUint8(size); size++;\n              block.bitsPerPixel = headerByte & 63;\n              headerByte >>= 6;\n              block.numValidPixelsType = headerByte;\n              if (headerByte === 2) {\n                block.numValidPixels = view.getUint8(size); size++;\n              } else if (headerByte === 1) {\n                block.numValidPixels = view.getUint16(size, true); size += 2;\n              } else if (headerByte === 0) {\n                block.numValidPixels = view.getUint32(size, true); size += 4;\n              } else {\n                throw \"Invalid valid pixel count type\";\n              }\n            }\n          }\n          fp += size;\n\n          if (block.encoding === 3) {\n            continue;\n          }\n\n          var arrayBuf, store8;\n          if (block.encoding === 0) {\n            var numPixels = (data.pixels.numBytes - 1) / 4;\n            if (numPixels !== Math.floor(numPixels)) {\n              throw \"uncompressed block has invalid length\";\n            }\n            arrayBuf = new ArrayBuffer(numPixels * 4);\n            store8 = new Uint8Array(arrayBuf);\n            store8.set(new Uint8Array(input, fp, numPixels * 4));\n            var rawData = new Float32Array(arrayBuf);\n            block.rawData = rawData;\n            fp += numPixels * 4;\n          } else if (block.encoding === 1) {\n            var dataBytes = Math.ceil(block.numValidPixels * block.bitsPerPixel / 8);\n            var dataWords = Math.ceil(dataBytes / 4);\n            arrayBuf = new ArrayBuffer(dataWords * 4);\n            store8 = new Uint8Array(arrayBuf);\n            store8.set(new Uint8Array(input, fp, dataBytes));\n            block.stuffedData = new Uint32Array(arrayBuf);\n            fp += dataBytes;\n          }\n        }\n      }\n      data.eofOffset = fp;\n      return data;\n    };\n\n    var unstuff = function(src, bitsPerPixel, numPixels, offset, scale, dest, maxValue) {\n      var bitMask = (1 << bitsPerPixel) - 1;\n      var i = 0, o;\n      var bitsLeft = 0;\n      var n, buffer;\n      var nmax = Math.ceil((maxValue - offset) / scale);\n      // get rid of trailing bytes that are already part of next block\n      var numInvalidTailBytes = src.length * 4 - Math.ceil(bitsPerPixel * numPixels / 8);\n      src[src.length - 1] <<= 8 * numInvalidTailBytes;\n\n      for (o = 0; o < numPixels; o++) {\n        if (bitsLeft === 0) {\n          buffer = src[i++];\n          bitsLeft = 32;\n        }\n        if (bitsLeft >= bitsPerPixel) {\n          n = (buffer >>> (bitsLeft - bitsPerPixel)) & bitMask;\n          bitsLeft -= bitsPerPixel;\n        } else {\n          var missingBits = (bitsPerPixel - bitsLeft);\n          n = ((buffer & bitMask) << missingBits) & bitMask;\n          buffer = src[i++];\n          bitsLeft = 32 - missingBits;\n          n += (buffer >>> bitsLeft);\n        }\n        //pixel values may exceed max due to quantization\n        dest[o] = n < nmax ? offset + n * scale : maxValue;\n      }\n      return dest;\n    };\n\n    return CntZImage;\n  })();\n\n  //version 2. Supports 2.1, 2.2, 2.3\n  var Lerc2Decode = (function() {\n    \"use strict\";\n    // Note: currently, this module only has an implementation for decoding LERC data, not encoding. The name of\n    // the class was chosen to be future proof, following LercDecode.\n\n    /*****************************************\n    * private static class bitsutffer used by Lerc2Decode\n    *******************************************/\n    var BitStuffer = {\n      //methods ending with 2 are for the new byte order used by Lerc2.3 and above.\n      //originalUnstuff is used to unpack Huffman code table. code is duplicated to unstuffx for performance reasons.\n      unstuff: function(src, dest, bitsPerPixel, numPixels, lutArr, offset, scale, maxValue) {\n        var bitMask = (1 << bitsPerPixel) - 1;\n        var i = 0, o;\n        var bitsLeft = 0;\n        var n, buffer, missingBits, nmax;\n\n        // get rid of trailing bytes that are already part of next block\n        var numInvalidTailBytes = src.length * 4 - Math.ceil(bitsPerPixel * numPixels / 8);\n        src[src.length - 1] <<= 8 * numInvalidTailBytes;\n        if (lutArr) {\n          for (o = 0; o < numPixels; o++) {\n            if (bitsLeft === 0) {\n              buffer = src[i++];\n              bitsLeft = 32;\n            }\n            if (bitsLeft >= bitsPerPixel) {\n              n = (buffer >>> (bitsLeft - bitsPerPixel)) & bitMask;\n              bitsLeft -= bitsPerPixel;\n            }\n            else {\n              missingBits = (bitsPerPixel - bitsLeft);\n              n = ((buffer & bitMask) << missingBits) & bitMask;\n              buffer = src[i++];\n              bitsLeft = 32 - missingBits;\n              n += (buffer >>> bitsLeft);\n            }\n            dest[o] = lutArr[n];//offset + lutArr[n] * scale;\n          }\n        }\n        else {\n          nmax = Math.ceil((maxValue - offset) / scale);\n          for (o = 0; o < numPixels; o++) {\n            if (bitsLeft === 0) {\n              buffer = src[i++];\n              bitsLeft = 32;\n            }\n            if (bitsLeft >= bitsPerPixel) {\n              n = (buffer >>> (bitsLeft - bitsPerPixel)) & bitMask;\n              bitsLeft -= bitsPerPixel;\n            }\n            else {\n              missingBits = (bitsPerPixel - bitsLeft);\n              n = ((buffer & bitMask) << missingBits) & bitMask;\n              buffer = src[i++];\n              bitsLeft = 32 - missingBits;\n              n += (buffer >>> bitsLeft);\n            }\n            //pixel values may exceed max due to quantization\n            dest[o] = n < nmax ? offset + n * scale : maxValue;\n          }\n        }\n      },\n\n      unstuffLUT: function(src, bitsPerPixel, numPixels, offset, scale, maxValue) {\n        var bitMask = (1 << bitsPerPixel) - 1;\n        var i = 0, o = 0, missingBits = 0, bitsLeft = 0, n = 0;\n        var buffer;\n        var dest = [];\n\n        // get rid of trailing bytes that are already part of next block\n        var numInvalidTailBytes = src.length * 4 - Math.ceil(bitsPerPixel * numPixels / 8);\n        src[src.length - 1] <<= 8 * numInvalidTailBytes;\n\n        var nmax = Math.ceil((maxValue - offset) / scale);\n        for (o = 0; o < numPixels; o++) {\n          if (bitsLeft === 0) {\n            buffer = src[i++];\n            bitsLeft = 32;\n          }\n          if (bitsLeft >= bitsPerPixel) {\n            n = (buffer >>> (bitsLeft - bitsPerPixel)) & bitMask;\n            bitsLeft -= bitsPerPixel;\n          } else {\n            missingBits = (bitsPerPixel - bitsLeft);\n            n = ((buffer & bitMask) << missingBits) & bitMask;\n            buffer = src[i++];\n            bitsLeft = 32 - missingBits;\n            n += (buffer >>> bitsLeft);\n          }\n          //dest.push(n);\n          dest[o] = n < nmax ? offset + n * scale : maxValue;\n        }\n        dest.unshift(offset);//1st one\n        return dest;\n      },\n\n      unstuff2: function(src, dest, bitsPerPixel, numPixels, lutArr, offset, scale, maxValue) {\n        var bitMask = (1 << bitsPerPixel) - 1;\n        var i = 0, o;\n        var bitsLeft = 0, bitPos = 0;\n        var n, buffer, missingBits;\n        if (lutArr) {\n          for (o = 0; o < numPixels; o++) {\n            if (bitsLeft === 0) {\n              buffer = src[i++];\n              bitsLeft = 32;\n              bitPos = 0;\n            }\n            if (bitsLeft >= bitsPerPixel) {\n              n = ((buffer >>> bitPos) & bitMask);\n              bitsLeft -= bitsPerPixel;\n              bitPos += bitsPerPixel;\n            } else {\n              missingBits = (bitsPerPixel - bitsLeft);\n              n = (buffer >>> bitPos) & bitMask;\n              buffer = src[i++];\n              bitsLeft = 32 - missingBits;\n              n |= (buffer & ((1 << missingBits) - 1)) << (bitsPerPixel - missingBits);\n              bitPos = missingBits;\n            }\n            dest[o] = lutArr[n];\n          }\n        }\n        else {\n          var nmax = Math.ceil((maxValue - offset) / scale);\n          for (o = 0; o < numPixels; o++) {\n            if (bitsLeft === 0) {\n              buffer = src[i++];\n              bitsLeft = 32;\n              bitPos = 0;\n            }\n            if (bitsLeft >= bitsPerPixel) {\n              //no unsigned left shift\n              n = ((buffer >>> bitPos) & bitMask);\n              bitsLeft -= bitsPerPixel;\n              bitPos += bitsPerPixel;\n            } else {\n              missingBits = (bitsPerPixel - bitsLeft);\n              n = (buffer >>> bitPos) & bitMask;//((buffer & bitMask) << missingBits) & bitMask;\n              buffer = src[i++];\n              bitsLeft = 32 - missingBits;\n              n |= (buffer & ((1 << missingBits) - 1)) << (bitsPerPixel - missingBits);\n              bitPos = missingBits;\n            }\n            //pixel values may exceed max due to quantization\n            dest[o] = n < nmax ? offset + n * scale : maxValue;\n          }\n        }\n        return dest;\n      },\n\n      unstuffLUT2: function(src, bitsPerPixel, numPixels, offset, scale, maxValue) {\n        var bitMask = (1 << bitsPerPixel) - 1;\n        var i = 0, o = 0, missingBits = 0, bitsLeft = 0, n = 0, bitPos = 0;\n        var buffer;\n        var dest = [];\n        var nmax = Math.ceil((maxValue - offset) / scale);\n        for (o = 0; o < numPixels; o++) {\n          if (bitsLeft === 0) {\n            buffer = src[i++];\n            bitsLeft = 32;\n            bitPos = 0;\n          }\n          if (bitsLeft >= bitsPerPixel) {\n            //no unsigned left shift\n            n = ((buffer >>> bitPos) & bitMask);\n            bitsLeft -= bitsPerPixel;\n            bitPos += bitsPerPixel;\n          } else {\n            missingBits = (bitsPerPixel - bitsLeft);\n            n = (buffer >>> bitPos) & bitMask;//((buffer & bitMask) << missingBits) & bitMask;\n            buffer = src[i++];\n            bitsLeft = 32 - missingBits;\n            n |= (buffer & ((1 << missingBits) - 1)) << (bitsPerPixel - missingBits);\n            bitPos = missingBits;\n          }\n          //dest.push(n);\n          dest[o] = n < nmax ? offset + n * scale : maxValue;\n        }\n        dest.unshift(offset);\n        return dest;\n      },\n\n      originalUnstuff: function(src, dest, bitsPerPixel, numPixels) {\n        var bitMask = (1 << bitsPerPixel) - 1;\n        var i = 0, o;\n        var bitsLeft = 0;\n        var n, buffer, missingBits;\n\n        // get rid of trailing bytes that are already part of next block\n        var numInvalidTailBytes = src.length * 4 - Math.ceil(bitsPerPixel * numPixels / 8);\n        src[src.length - 1] <<= 8 * numInvalidTailBytes;\n\n        for (o = 0; o < numPixels; o++) {\n          if (bitsLeft === 0) {\n            buffer = src[i++];\n            bitsLeft = 32;\n          }\n          if (bitsLeft >= bitsPerPixel) {\n            n = (buffer >>> (bitsLeft - bitsPerPixel)) & bitMask;\n            bitsLeft -= bitsPerPixel;\n          }\n          else {\n            missingBits = (bitsPerPixel - bitsLeft);\n            n = ((buffer & bitMask) << missingBits) & bitMask;\n            buffer = src[i++];\n            bitsLeft = 32 - missingBits;\n            n += (buffer >>> bitsLeft);\n          }\n          dest[o] = n;\n        }\n        return dest;\n      },\n\n      originalUnstuff2: function(src, dest, bitsPerPixel, numPixels) {\n        var bitMask = (1 << bitsPerPixel) - 1;\n        var i = 0, o;\n        var bitsLeft = 0, bitPos = 0;\n        var n, buffer, missingBits;\n        //micro-optimizations\n        for (o = 0; o < numPixels; o++) {\n          if (bitsLeft === 0) {\n            buffer = src[i++];\n            bitsLeft = 32;\n            bitPos = 0;\n          }\n          if (bitsLeft >= bitsPerPixel) {\n            //no unsigned left shift\n            n = ((buffer >>> bitPos) & bitMask);\n            bitsLeft -= bitsPerPixel;\n            bitPos += bitsPerPixel;\n          } else {\n            missingBits = (bitsPerPixel - bitsLeft);\n            n = (buffer >>> bitPos) & bitMask;//((buffer & bitMask) << missingBits) & bitMask;\n            buffer = src[i++];\n            bitsLeft = 32 - missingBits;\n            n |= (buffer & ((1 << missingBits) - 1)) << (bitsPerPixel - missingBits);\n            bitPos = missingBits;\n          }\n          dest[o] = n;\n        }\n        return dest;\n      }\n    };\n\n    /*****************************************\n    *private static class used by Lerc2Decode\n    ******************************************/\n    var Lerc2Helpers = {\n      HUFFMAN_LUT_BITS_MAX: 12, //use 2^12 lut, treat it like constant\n      computeChecksumFletcher32: function(input) {\n\n        var sum1 = 0xffff, sum2 = 0xffff;\n        var len = input.length;\n        var words = Math.floor(len / 2);\n        var i = 0;\n        while (words) {\n          var tlen = (words >= 359) ? 359 : words;\n          words -= tlen;\n          do {\n            sum1 += (input[i++] << 8);\n            sum2 += sum1 += input[i++];\n          } while (--tlen);\n\n          sum1 = (sum1 & 0xffff) + (sum1 >>> 16);\n          sum2 = (sum2 & 0xffff) + (sum2 >>> 16);\n        }\n\n        // add the straggler byte if it exists\n        if (len & 1) {\n          sum2 += sum1 += (input[i] << 8);\n        }\n        // second reduction step to reduce sums to 16 bits\n        sum1 = (sum1 & 0xffff) + (sum1 >>> 16);\n        sum2 = (sum2 & 0xffff) + (sum2 >>> 16);\n\n        return (sum2 << 16 | sum1) >>> 0;\n      },\n\n      readHeaderInfo: function(input, data) {\n        var ptr = data.ptr;\n        var fileIdView = new Uint8Array(input, ptr, 6);\n        var headerInfo = {};\n        headerInfo.fileIdentifierString = String.fromCharCode.apply(null, fileIdView);\n        if (headerInfo.fileIdentifierString.lastIndexOf(\"Lerc2\", 0) !== 0) {\n          throw \"Unexpected file identifier string (expect Lerc2 ): \" + headerInfo.fileIdentifierString;\n        }\n        ptr += 6;\n        var view = new DataView(input, ptr, 8);\n        var fileVersion = view.getInt32(0, true);\n        headerInfo.fileVersion = fileVersion;\n        ptr += 4;\n        if (fileVersion >= 3) {\n          headerInfo.checksum = view.getUint32(4, true); //nrows\n          ptr += 4;\n        }\n\n        //keys start from here\n        view = new DataView(input, ptr, 12);\n        headerInfo.height = view.getUint32(0, true); //nrows\n        headerInfo.width = view.getUint32(4, true); //ncols\n        ptr += 8;\n        if (fileVersion >= 4) {\n          headerInfo.numDims = view.getUint32(8, true);\n          ptr += 4;\n        }\n        else {\n          headerInfo.numDims = 1;\n        }\n\n        view = new DataView(input, ptr, 40);\n        headerInfo.numValidPixel = view.getUint32(0, true);\n        headerInfo.microBlockSize = view.getInt32(4, true);\n        headerInfo.blobSize = view.getInt32(8, true);\n        headerInfo.imageType = view.getInt32(12, true);\n\n        headerInfo.maxZError = view.getFloat64(16, true);\n        headerInfo.zMin = view.getFloat64(24, true);\n        headerInfo.zMax = view.getFloat64(32, true);\n        ptr += 40;\n        data.headerInfo = headerInfo;\n        data.ptr = ptr;\n\n        var checksum, keyLength;\n        if (fileVersion >= 3) {\n          keyLength = fileVersion >= 4 ? 52 : 48;\n          checksum = this.computeChecksumFletcher32(new Uint8Array(input, ptr - keyLength, headerInfo.blobSize - 14));\n          if (checksum !== headerInfo.checksum) {\n            throw \"Checksum failed.\";\n          }\n        }\n        return true;\n      },\n\n      checkMinMaxRanges: function(input, data) {\n        var headerInfo = data.headerInfo;\n        var OutPixelTypeArray = this.getDataTypeArray(headerInfo.imageType);\n        var rangeBytes = headerInfo.numDims * this.getDataTypeSize(headerInfo.imageType);\n        var minValues = this.readSubArray(input, data.ptr, OutPixelTypeArray, rangeBytes);\n        var maxValues = this.readSubArray(input, data.ptr + rangeBytes, OutPixelTypeArray, rangeBytes);\n        data.ptr += (2 * rangeBytes);\n        var i, equal = true;\n        for (i = 0; i < headerInfo.numDims; i++) {\n          if (minValues[i] !== maxValues[i]) {\n            equal = false;\n            break;\n          }\n        }\n        headerInfo.minValues = minValues;\n        headerInfo.maxValues = maxValues;\n        return equal;\n      },\n\n      readSubArray: function(input, ptr, OutPixelTypeArray, numBytes) {\n        var rawData;\n        if (OutPixelTypeArray === Uint8Array) {\n          rawData = new Uint8Array(input, ptr, numBytes);\n        }\n        else {\n          var arrayBuf = new ArrayBuffer(numBytes);\n          var store8 = new Uint8Array(arrayBuf);\n          store8.set(new Uint8Array(input, ptr, numBytes));\n          rawData = new OutPixelTypeArray(arrayBuf);\n        }\n        return rawData;\n      },\n\n      readMask: function(input, data) {\n        var ptr = data.ptr;\n        var headerInfo = data.headerInfo;\n        var numPixels = headerInfo.width * headerInfo.height;\n        var numValidPixel = headerInfo.numValidPixel;\n\n        var view = new DataView(input, ptr, 4);\n        var mask = {};\n        mask.numBytes = view.getUint32(0, true);\n        ptr += 4;\n\n        // Mask Data\n        if ((0 === numValidPixel || numPixels === numValidPixel) && 0 !== mask.numBytes) {\n          throw (\"invalid mask\");\n        }\n        var bitset, resultMask;\n        if (numValidPixel === 0) {\n          bitset = new Uint8Array(Math.ceil(numPixels / 8));\n          mask.bitset = bitset;\n          resultMask = new Uint8Array(numPixels);\n          data.pixels.resultMask = resultMask;\n          ptr += mask.numBytes;\n        }// ????? else if (data.mask.numBytes > 0 && data.mask.numBytes< data.numValidPixel) {\n        else if (mask.numBytes > 0) {\n          bitset = new Uint8Array(Math.ceil(numPixels / 8));\n          view = new DataView(input, ptr, mask.numBytes);\n          var cnt = view.getInt16(0, true);\n          var ip = 2, op = 0, val = 0;\n          do {\n            if (cnt > 0) {\n              while (cnt--) { bitset[op++] = view.getUint8(ip++); }\n            } else {\n              val = view.getUint8(ip++);\n              cnt = -cnt;\n              while (cnt--) { bitset[op++] = val; }\n            }\n            cnt = view.getInt16(ip, true);\n            ip += 2;\n          } while (ip < mask.numBytes);\n          if ((cnt !== -32768) || (op < bitset.length)) {\n            throw \"Unexpected end of mask RLE encoding\";\n          }\n\n          resultMask = new Uint8Array(numPixels);\n          var mb = 0, k = 0;\n\n          for (k = 0; k < numPixels; k++) {\n            if (k & 7) {\n              mb = bitset[k >> 3];\n              mb <<= k & 7;\n            }\n            else {\n              mb = bitset[k >> 3];\n            }\n            if (mb & 128) {\n              resultMask[k] = 1;\n            }\n          }\n          data.pixels.resultMask = resultMask;\n\n          mask.bitset = bitset;\n          ptr += mask.numBytes;\n        }\n        data.ptr = ptr;\n        data.mask = mask;\n        return true;\n      },\n\n      readDataOneSweep: function(input, data, OutPixelTypeArray, useBSQForOutputDim) {\n        var ptr = data.ptr;\n        var headerInfo = data.headerInfo;\n        var numDims = headerInfo.numDims;\n        var numPixels = headerInfo.width * headerInfo.height;\n        var imageType = headerInfo.imageType;\n        var numBytes = headerInfo.numValidPixel * Lerc2Helpers.getDataTypeSize(imageType) * numDims;\n        //data.pixels.numBytes = numBytes;\n        var rawData;\n        var mask = data.pixels.resultMask;\n        if (OutPixelTypeArray === Uint8Array) {\n          rawData = new Uint8Array(input, ptr, numBytes);\n        }\n        else {\n          var arrayBuf = new ArrayBuffer(numBytes);\n          var store8 = new Uint8Array(arrayBuf);\n          store8.set(new Uint8Array(input, ptr, numBytes));\n          rawData = new OutPixelTypeArray(arrayBuf);\n        }\n        if (rawData.length === numPixels * numDims) {\n          if (useBSQForOutputDim) {\n            data.pixels.resultPixels = Lerc2Helpers.swapDimensionOrder(rawData, numPixels, numDims, OutPixelTypeArray, true);\n          }\n          else {\n            data.pixels.resultPixels = rawData;\n          }\n        }\n        else  //mask\n        {\n          data.pixels.resultPixels = new OutPixelTypeArray(numPixels * numDims);\n          var z = 0, k = 0, i = 0, nStart = 0;\n          if (numDims > 1) {\n            if (useBSQForOutputDim) {\n              for (k = 0; k < numPixels; k++) {\n                if (mask[k]) {\n                  nStart = k;\n                  for (i = 0; i < numDims; i++, nStart+=numPixels) {\n                    data.pixels.resultPixels[nStart] = rawData[z++];\n                  }\n                }\n              }\n            }\n            else {\n              for (k = 0; k < numPixels; k++) {\n                if (mask[k]) {\n                  nStart = k * numDims;\n                  for (i = 0; i < numDims; i++) {\n                    data.pixels.resultPixels[nStart + i] = rawData[z++];\n                  }\n                }\n              }\n            }\n          }\n          else {\n            for (k = 0; k < numPixels; k++) {\n              if (mask[k]) {\n                data.pixels.resultPixels[k] = rawData[z++];\n              }\n            }\n          }\n        }\n        ptr += numBytes;\n        data.ptr = ptr;       //return data;\n        return true;\n      },\n\n      readHuffmanTree: function(input, data) {\n        var BITS_MAX = this.HUFFMAN_LUT_BITS_MAX; //8 is slow for the large test image\n        //var size_max = 1 << BITS_MAX;\n        /* ************************\n        * reading code table\n        *************************/\n        var view = new DataView(input, data.ptr, 16);\n        data.ptr += 16;\n        var version = view.getInt32(0, true);\n        if (version < 2) {\n          throw \"unsupported Huffman version\";\n        }\n        var size = view.getInt32(4, true);\n        var i0 = view.getInt32(8, true);\n        var i1 = view.getInt32(12, true);\n        if (i0 >= i1) {\n          return false;\n        }\n        var blockDataBuffer = new Uint32Array(i1 - i0);\n        Lerc2Helpers.decodeBits(input, data, blockDataBuffer);\n        var codeTable = []; //size\n        var i, j, k, len;\n\n        for (i = i0; i < i1; i++) {\n          j = i - (i < size ? 0 : size);//wrap around\n          codeTable[j] = { first: blockDataBuffer[i - i0], second: null };\n        }\n\n        var dataBytes = input.byteLength - data.ptr;\n        var dataWords = Math.ceil(dataBytes / 4);\n        var arrayBuf = new ArrayBuffer(dataWords * 4);\n        var store8 = new Uint8Array(arrayBuf);\n        store8.set(new Uint8Array(input, data.ptr, dataBytes));\n        var stuffedData = new Uint32Array(arrayBuf); //must start from x*4\n        var bitPos = 0, word, srcPtr = 0;\n        word = stuffedData[0];\n        for (i = i0; i < i1; i++) {\n          j = i - (i < size ? 0 : size);//wrap around\n          len = codeTable[j].first;\n          if (len > 0) {\n            codeTable[j].second = (word << bitPos) >>> (32 - len);\n\n            if (32 - bitPos >= len) {\n              bitPos += len;\n              if (bitPos === 32) {\n                bitPos = 0;\n                srcPtr++;\n                word = stuffedData[srcPtr];\n              }\n            }\n            else {\n              bitPos += len - 32;\n              srcPtr++;\n              word = stuffedData[srcPtr];\n              codeTable[j].second |= word >>> (32 - bitPos);\n            }\n          }\n        }\n\n        //finished reading code table\n\n        /* ************************\n        * building lut\n        *************************/\n        var numBitsLUT = 0, numBitsLUTQick = 0;\n        var tree = new TreeNode();\n        for (i = 0; i < codeTable.length; i++) {\n          if (codeTable[i] !== undefined) {\n            numBitsLUT = Math.max(numBitsLUT, codeTable[i].first);\n          }\n        }\n        if (numBitsLUT >= BITS_MAX) {\n          numBitsLUTQick = BITS_MAX;\n        }\n        else {\n          numBitsLUTQick = numBitsLUT;\n        }\n        // for debugging purpose\n        // if (numBitsLUT >= 30) {\n        //   console.log(\"WARning, large NUM LUT BITS IS \" + numBitsLUT);\n        // }\n        var decodeLut = [], entry, code, numEntries, jj, currentBit, node;\n        for (i = i0; i < i1; i++) {\n          j = i - (i < size ? 0 : size);//wrap around\n          len = codeTable[j].first;\n          if (len > 0) {\n            entry = [len, j];\n            if (len <= numBitsLUTQick) {\n              code = codeTable[j].second << (numBitsLUTQick - len);\n              numEntries = 1 << (numBitsLUTQick - len);\n              for (k = 0; k < numEntries; k++) {\n                decodeLut[code | k] = entry;\n              }\n            }\n            else {\n              //build tree\n              code = codeTable[j].second;\n              node = tree;\n              for (jj = len - 1; jj >= 0; jj--) {\n                currentBit = code >>> jj & 1; //no left shift as length could be 30,31\n                if (currentBit) {\n                  if (!node.right) {\n                    node.right = new TreeNode();\n                  }\n                  node = node.right;\n                }\n                else {\n                  if (!node.left) {\n                    node.left = new TreeNode();\n                  }\n                  node = node.left;\n                }\n                if (jj === 0 && !node.val) {\n                  node.val = entry[1];\n                }\n              }\n            }\n          }\n        }\n        return {\n          decodeLut: decodeLut,\n          numBitsLUTQick: numBitsLUTQick,\n          numBitsLUT: numBitsLUT,\n          tree: tree,\n          stuffedData: stuffedData,\n          srcPtr: srcPtr,\n          bitPos: bitPos\n        };\n      },\n\n      readHuffman: function(input, data, OutPixelTypeArray, useBSQForOutputDim) {\n        var headerInfo = data.headerInfo;\n        var numDims = headerInfo.numDims;\n        var height = data.headerInfo.height;\n        var width = data.headerInfo.width;\n        var numPixels = width * height;\n        //var size_max = 1 << BITS_MAX;\n        /* ************************\n        * reading huffman structure info\n        *************************/\n        var huffmanInfo = this.readHuffmanTree(input, data);\n        var decodeLut = huffmanInfo.decodeLut;\n        var tree = huffmanInfo.tree;\n        //stuffedData includes huffman headers\n        var stuffedData = huffmanInfo.stuffedData;\n        var srcPtr = huffmanInfo.srcPtr;\n        var bitPos = huffmanInfo.bitPos;\n        var numBitsLUTQick = huffmanInfo.numBitsLUTQick;\n        var numBitsLUT = huffmanInfo.numBitsLUT;\n        var offset = data.headerInfo.imageType === 0 ? 128 : 0;\n        /*************************\n        *  decode\n        ***************************/\n        var node, val, delta, mask = data.pixels.resultMask, valTmp, valTmpQuick, currentBit;\n        var i, j, k, ii;\n        var prevVal = 0;\n        if (bitPos > 0) {\n          srcPtr++;\n          bitPos = 0;\n        }\n        var word = stuffedData[srcPtr];\n        var deltaEncode = data.encodeMode === 1;\n        var resultPixelsAllDim = new OutPixelTypeArray(numPixels * numDims);\n        var resultPixels = resultPixelsAllDim;\n        var iDim;\n        // TODO: reevaluate the need to keep inlined decoding code as IE support is phasing out\n        if (numDims < 2 || deltaEncode) {\n          for (iDim = 0; iDim < numDims; iDim++) {\n            if (numDims > 1) {\n              //get the mem block of current dimension\n              resultPixels = new OutPixelTypeArray(resultPixelsAllDim.buffer, numPixels * iDim, numPixels);\n              prevVal = 0;\n            }\n            if (data.headerInfo.numValidPixel === width * height) { //all valid\n              for (k = 0, i = 0; i < height; i++) {\n                for (j = 0; j < width; j++, k++) {\n                  val = 0;\n                  valTmp = (word << bitPos) >>> (32 - numBitsLUTQick);\n                  valTmpQuick = valTmp;// >>> deltaBits;\n                  if (32 - bitPos < numBitsLUTQick) {\n                    valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUTQick));\n                    valTmpQuick = valTmp;// >>> deltaBits;\n                  }\n                  if (decodeLut[valTmpQuick])    // if there, move the correct number of bits and done\n                  {\n                    val = decodeLut[valTmpQuick][1];\n                    bitPos += decodeLut[valTmpQuick][0];\n                  }\n                  else {\n                    valTmp = (word << bitPos) >>> (32 - numBitsLUT);\n                    valTmpQuick = valTmp;// >>> deltaBits;\n                    if (32 - bitPos < numBitsLUT) {\n                      valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUT));\n                      valTmpQuick = valTmp;// >>> deltaBits;\n                    }\n                    node = tree;\n                    for (ii = 0; ii < numBitsLUT; ii++) {\n                      currentBit = valTmp >>> (numBitsLUT - ii - 1) & 1;\n                      node = currentBit ? node.right : node.left;\n                      if (!(node.left || node.right)) {\n                        val = node.val;\n                        bitPos = bitPos + ii + 1;\n                        break;\n                      }\n                    }\n                  }\n    \n                  if (bitPos >= 32) {\n                    bitPos -= 32;\n                    srcPtr++;\n                    word = stuffedData[srcPtr];\n                  }\n    \n                  delta = val - offset;\n                  if (deltaEncode) {\n                    if (j > 0) {\n                      delta += prevVal;    // use overflow\n                    }\n                    else if (i > 0) {\n                      delta += resultPixels[k - width];\n                    }\n                    else {\n                      delta += prevVal;\n                    }\n                    delta &= 0xFF; //overflow\n                    resultPixels[k] = delta;//overflow\n                    prevVal = delta;\n                  }\n                  else {\n                    resultPixels[k] = delta;\n                  }\n                }\n              }\n            }\n            else { //not all valid, use mask\n              for (k = 0, i = 0; i < height; i++) {\n                for (j = 0; j < width; j++, k++) {\n                  if (mask[k]) {\n                    val = 0;\n                    valTmp = (word << bitPos) >>> (32 - numBitsLUTQick);\n                    valTmpQuick = valTmp;// >>> deltaBits;\n                    if (32 - bitPos < numBitsLUTQick) {\n                      valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUTQick));\n                      valTmpQuick = valTmp;// >>> deltaBits;\n                    }\n                    if (decodeLut[valTmpQuick])    // if there, move the correct number of bits and done\n                    {\n                      val = decodeLut[valTmpQuick][1];\n                      bitPos += decodeLut[valTmpQuick][0];\n                    }\n                    else {\n                      valTmp = (word << bitPos) >>> (32 - numBitsLUT);\n                      valTmpQuick = valTmp;// >>> deltaBits;\n                      if (32 - bitPos < numBitsLUT) {\n                        valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUT));\n                        valTmpQuick = valTmp;// >>> deltaBits;\n                      }\n                      node = tree;\n                      for (ii = 0; ii < numBitsLUT; ii++) {\n                        currentBit = valTmp >>> (numBitsLUT - ii - 1) & 1;\n                        node = currentBit ? node.right : node.left;\n                        if (!(node.left || node.right)) {\n                          val = node.val;\n                          bitPos = bitPos + ii + 1;\n                          break;\n                        }\n                      }\n                    }\n    \n                    if (bitPos >= 32) {\n                      bitPos -= 32;\n                      srcPtr++;\n                      word = stuffedData[srcPtr];\n                    }\n    \n                    delta = val - offset;\n                    if (deltaEncode) {\n                      if (j > 0 && mask[k - 1]) {\n                        delta += prevVal;    // use overflow\n                      }\n                      else if (i > 0 && mask[k - width]) {\n                        delta += resultPixels[k - width];\n                      }\n                      else {\n                        delta += prevVal;\n                      }\n    \n                      delta &= 0xFF; //overflow\n                      resultPixels[k] = delta;//overflow\n                      prevVal = delta;\n                    }\n                    else {\n                      resultPixels[k] = delta;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        else {\n          for (k = 0, i = 0; i < height; i++) {\n            for (j = 0; j < width; j++) {\n              k = i * width + j;\n              if (!mask || mask[k]) {\n                for (iDim = 0; iDim < numDims; iDim++, k+=numPixels) {\n                  val = 0;\n                  valTmp = (word << bitPos) >>> (32 - numBitsLUTQick);\n                  valTmpQuick = valTmp;\n                  if (32 - bitPos < numBitsLUTQick) {\n                    valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUTQick));\n                    valTmpQuick = valTmp;\n                  }\n                  if (decodeLut[valTmpQuick])\n                  {\n                    val = decodeLut[valTmpQuick][1];\n                    bitPos += decodeLut[valTmpQuick][0];\n                  }\n                  else {\n                    valTmp = (word << bitPos) >>> (32 - numBitsLUT);\n                    valTmpQuick = valTmp;\n                    if (32 - bitPos < numBitsLUT) {\n                      valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUT));\n                      valTmpQuick = valTmp;\n                    }\n                    node = tree;\n                    for (ii = 0; ii < numBitsLUT; ii++) {\n                      currentBit = valTmp >>> (numBitsLUT - ii - 1) & 1;\n                      node = currentBit ? node.right : node.left;\n                      if (!(node.left || node.right)) {\n                        val = node.val;\n                        bitPos = bitPos + ii + 1;\n                        break;\n                      }\n                    }\n                  }\n\n                  if (bitPos >= 32) {\n                    bitPos -= 32;\n                    srcPtr++;\n                    word = stuffedData[srcPtr];\n                  }\n\n                  delta = val - offset;\n                  resultPixels[k] = delta;\n                }\n              }\n            }\n          }\n        }\n        data.ptr = data.ptr + (srcPtr + 1) * 4 + (bitPos > 0 ? 4 : 0);\n        data.pixels.resultPixels = resultPixelsAllDim;\n        //swap for BIP layout\n        if (numDims > 1 && !useBSQForOutputDim) {\n          data.pixels.resultPixels = Lerc2Helpers.swapDimensionOrder(resultPixelsAllDim, numPixels, numDims, OutPixelTypeArray);\n        }\n      },\n\n      decodeBits: function(input, data, blockDataBuffer, offset, iDim) {\n        {\n          //bitstuff encoding is 3\n          var headerInfo = data.headerInfo;\n          var fileVersion = headerInfo.fileVersion;\n          //var block = {};\n          var blockPtr = 0;\n          var viewByteLength = ((input.byteLength - data.ptr) >= 5) ? 5 : (input.byteLength - data.ptr);\n          var view = new DataView(input, data.ptr, viewByteLength);\n          var headerByte = view.getUint8(0);\n          blockPtr++;\n          var bits67 = headerByte >> 6;\n          var n = (bits67 === 0) ? 4 : 3 - bits67;\n          var doLut = (headerByte & 32) > 0 ? true : false;//5th bit\n          var numBits = headerByte & 31;\n          var numElements = 0;\n          if (n === 1) {\n            numElements = view.getUint8(blockPtr); blockPtr++;\n          } else if (n === 2) {\n            numElements = view.getUint16(blockPtr, true); blockPtr += 2;\n          } else if (n === 4) {\n            numElements = view.getUint32(blockPtr, true); blockPtr += 4;\n          } else {\n            throw \"Invalid valid pixel count type\";\n          }\n          //fix: huffman codes are bit stuffed, but not bound by data's max value, so need to use originalUnstuff\n          //offset = offset || 0;\n          var scale = 2 * headerInfo.maxZError;\n          var stuffedData, arrayBuf, store8, dataBytes, dataWords;\n          var lutArr, lutData, lutBytes, lutBitsPerElement, bitsPerPixel;\n          var zMax = headerInfo.numDims > 1 ? headerInfo.maxValues[iDim] : headerInfo.zMax;\n          if (doLut) {\n            data.counter.lut++;\n            lutBytes = view.getUint8(blockPtr);\n            lutBitsPerElement = numBits;\n            blockPtr++;\n            dataBytes = Math.ceil((lutBytes - 1) * numBits / 8);\n            dataWords = Math.ceil(dataBytes / 4);\n            arrayBuf = new ArrayBuffer(dataWords * 4);\n            store8 = new Uint8Array(arrayBuf);\n\n            data.ptr += blockPtr;\n            store8.set(new Uint8Array(input, data.ptr, dataBytes));\n\n            lutData = new Uint32Array(arrayBuf);\n            data.ptr += dataBytes;\n\n            bitsPerPixel = 0;\n            while ((lutBytes - 1) >>> bitsPerPixel) {\n              bitsPerPixel++;\n            }\n            dataBytes = Math.ceil(numElements * bitsPerPixel / 8);\n            dataWords = Math.ceil(dataBytes / 4);\n            arrayBuf = new ArrayBuffer(dataWords * 4);\n            store8 = new Uint8Array(arrayBuf);\n            store8.set(new Uint8Array(input, data.ptr, dataBytes));\n            stuffedData = new Uint32Array(arrayBuf);\n            data.ptr += dataBytes;\n            if (fileVersion >= 3) {\n              lutArr = BitStuffer.unstuffLUT2(lutData, numBits, lutBytes - 1, offset, scale, zMax);\n            }\n            else {\n              lutArr = BitStuffer.unstuffLUT(lutData, numBits, lutBytes - 1, offset, scale, zMax);\n            }\n            //lutArr.unshift(0);\n            if (fileVersion >= 3) {\n              //BitStuffer.unstuff2(block, blockDataBuffer, headerInfo.zMax);\n              BitStuffer.unstuff2(stuffedData, blockDataBuffer, bitsPerPixel, numElements, lutArr);\n            }\n            else {\n              BitStuffer.unstuff(stuffedData, blockDataBuffer, bitsPerPixel, numElements, lutArr);\n            }\n          }\n          else {\n            //console.debug(\"bitstuffer\");\n            data.counter.bitstuffer++;\n            bitsPerPixel = numBits;\n            data.ptr += blockPtr;\n            if (bitsPerPixel > 0) {\n              dataBytes = Math.ceil(numElements * bitsPerPixel / 8);\n              dataWords = Math.ceil(dataBytes / 4);\n              arrayBuf = new ArrayBuffer(dataWords * 4);\n              store8 = new Uint8Array(arrayBuf);\n              store8.set(new Uint8Array(input, data.ptr, dataBytes));\n              stuffedData = new Uint32Array(arrayBuf);\n              data.ptr += dataBytes;\n              if (fileVersion >= 3) {\n                if (offset == null) {\n                  BitStuffer.originalUnstuff2(stuffedData, blockDataBuffer, bitsPerPixel, numElements);\n                }\n                else {\n                  BitStuffer.unstuff2(stuffedData, blockDataBuffer, bitsPerPixel, numElements, false, offset, scale, zMax);\n                }\n              }\n              else {\n                if (offset == null) {\n                  BitStuffer.originalUnstuff(stuffedData, blockDataBuffer, bitsPerPixel, numElements);\n                }\n                else {\n                  BitStuffer.unstuff(stuffedData, blockDataBuffer, bitsPerPixel, numElements, false, offset, scale, zMax);\n                }\n              }\n            }\n          }\n        }\n\n      },\n\n      readTiles: function(input, data, OutPixelTypeArray, useBSQForOutputDim) {\n        var headerInfo = data.headerInfo;\n        var width = headerInfo.width;\n        var height = headerInfo.height;\n        var numPixels = width * height;\n        var microBlockSize = headerInfo.microBlockSize;\n        var imageType = headerInfo.imageType;\n        var dataTypeSize = Lerc2Helpers.getDataTypeSize(imageType);\n        var numBlocksX = Math.ceil(width / microBlockSize);\n        var numBlocksY = Math.ceil(height / microBlockSize);\n        data.pixels.numBlocksY = numBlocksY;\n        data.pixels.numBlocksX = numBlocksX;\n        data.pixels.ptr = 0;\n        var row = 0, col = 0, blockY = 0, blockX = 0, thisBlockHeight = 0, thisBlockWidth = 0, bytesLeft = 0, headerByte = 0, bits67 = 0, testCode = 0, outPtr = 0, outStride = 0, numBytes = 0, bytesleft = 0, z = 0, blockPtr = 0;\n        var view, block, arrayBuf, store8, rawData;\n        var blockEncoding;\n        var blockDataBuffer = new OutPixelTypeArray(microBlockSize * microBlockSize);\n        var lastBlockHeight = (height % microBlockSize) || microBlockSize;\n        var lastBlockWidth = (width % microBlockSize) || microBlockSize;\n        var offsetType, offset;\n        var numDims = headerInfo.numDims, iDim;\n        var mask = data.pixels.resultMask;\n        var resultPixels = data.pixels.resultPixels;\n        var fileVersion = headerInfo.fileVersion;\n        var fileVersionCheckNum = fileVersion >= 5 ? 14 : 15;\n        var isDiffEncoding;\n        var zMax = headerInfo.zMax;\n        //var resultPixelsAllDim = resultPixels;\n        var resultPixelsPrevDim;\n        for (blockY = 0; blockY < numBlocksY; blockY++) {\n          thisBlockHeight = (blockY !== numBlocksY - 1) ? microBlockSize : lastBlockHeight;\n          for (blockX = 0; blockX < numBlocksX; blockX++) {\n            //console.debug(\"y\" + blockY + \" x\" + blockX);\n            thisBlockWidth = (blockX !== numBlocksX - 1) ? microBlockSize : lastBlockWidth;\n\n            outPtr = blockY * width * microBlockSize + blockX * microBlockSize;\n            outStride = width - thisBlockWidth;\n\n            for (iDim = 0; iDim < numDims; iDim++) {\n              if (numDims > 1) {\n                resultPixelsPrevDim = resultPixels;\n                outPtr = blockY * width * microBlockSize + blockX * microBlockSize;\n                resultPixels = new OutPixelTypeArray(data.pixels.resultPixels.buffer, numPixels * iDim * dataTypeSize, numPixels);\n                zMax = headerInfo.maxValues[iDim];\n              } else {\n                resultPixelsPrevDim = null;\n              }\n              bytesLeft = input.byteLength - data.ptr;\n              view = new DataView(input, data.ptr, Math.min(10, bytesLeft));\n              block = {};\n              blockPtr = 0;\n              headerByte = view.getUint8(0);\n              blockPtr++;\n              isDiffEncoding = headerInfo.fileVersion >= 5 ? headerByte & 4 : 0;\n              bits67 = (headerByte >> 6) & 0xFF;\n              testCode = (headerByte >> 2) & fileVersionCheckNum;    // use bits 2345 for integrity check\n              if (testCode !== (((blockX * microBlockSize) >> 3) & fileVersionCheckNum)) {\n                throw \"integrity issue\";\n              }\n\n              if (isDiffEncoding && iDim === 0) {\n                throw \"integrity issue\";\n              }\n\n              blockEncoding = headerByte & 3;\n              if (blockEncoding > 3) {\n                data.ptr += blockPtr;\n                throw \"Invalid block encoding (\" + blockEncoding + \")\";\n              }\n              else if (blockEncoding === 2) { //constant 0\n                if (isDiffEncoding) {\n                  if (mask) {\n                    for (row = 0; row < thisBlockHeight; row++) {\n                      for (col = 0; col < thisBlockWidth; col++) {\n                        if (mask[outPtr]) {\n                          resultPixels[outPtr] = resultPixelsPrevDim[outPtr];\n                        }\n                        outPtr++;\n                      }\n                    }\n                  }\n                  else {\n                    for (row = 0; row < thisBlockHeight; row++) {\n                      for (col = 0; col < thisBlockWidth; col++) {\n                        resultPixels[outPtr] = resultPixelsPrevDim[outPtr];\n                        outPtr++;\n                      }\n                    }\n                  }\n                }\n                data.counter.constant++;\n                data.ptr += blockPtr;\n                continue;\n              }\n              else if (blockEncoding === 0) {  //uncompressed\n                if (isDiffEncoding) {\n                  // doesn't make sense, should not happen\n                  throw \"integrity issue\";\n                }\n                data.counter.uncompressed++;\n                data.ptr += blockPtr;\n                numBytes = thisBlockHeight * thisBlockWidth * dataTypeSize;\n                bytesleft = input.byteLength - data.ptr;\n                numBytes = numBytes < bytesleft ? numBytes : bytesleft;\n                //bit alignment\n                arrayBuf = new ArrayBuffer((numBytes % dataTypeSize) === 0 ? numBytes : (numBytes + dataTypeSize - numBytes % dataTypeSize));\n                store8 = new Uint8Array(arrayBuf);\n                store8.set(new Uint8Array(input, data.ptr, numBytes));\n                rawData = new OutPixelTypeArray(arrayBuf);\n                z = 0;\n                if (mask) {\n                  for (row = 0; row < thisBlockHeight; row++) {\n                    for (col = 0; col < thisBlockWidth; col++) {\n                      if (mask[outPtr]) {\n                        resultPixels[outPtr] = rawData[z++];\n                      }\n                      outPtr++;\n                    }\n                    outPtr += outStride;\n                  }\n                }\n                else {//all valid\n                  for (row = 0; row < thisBlockHeight; row++) {\n                    for (col = 0; col < thisBlockWidth; col++) {\n                      resultPixels[outPtr++] = rawData[z++];\n                    }\n                    outPtr += outStride;\n                  }\n                }\n                data.ptr += z * dataTypeSize;\n              }\n              else { //1 or 3\n                offsetType = Lerc2Helpers.getDataTypeUsed((isDiffEncoding && imageType < 6) ? 4 : imageType, bits67);\n                offset = Lerc2Helpers.getOnePixel(block, blockPtr, offsetType, view);\n                blockPtr += Lerc2Helpers.getDataTypeSize(offsetType);\n                if (blockEncoding === 3) //constant offset value\n                {\n                  data.ptr += blockPtr;\n                  data.counter.constantoffset++;\n                  //you can delete the following resultMask case in favor of performance because val is constant and users use nodata mask, otherwise nodatavalue post processing handles it too.\n                  //while the above statement is true, we're not doing it as we want to keep invalid pixel value at 0 rather than arbitrary values\n                  if (mask) {\n                    for (row = 0; row < thisBlockHeight; row++) {\n                      for (col = 0; col < thisBlockWidth; col++) {\n                        if (mask[outPtr]) {\n                          resultPixels[outPtr] = isDiffEncoding ? Math.min(zMax, resultPixelsPrevDim[outPtr] + offset) : offset;\n                        }\n                        outPtr++;\n                      }\n                      outPtr += outStride;\n                    }\n                  }\n                  else {\n                    for (row = 0; row < thisBlockHeight; row++) {\n                      for (col = 0; col < thisBlockWidth; col++) {\n                        resultPixels[outPtr] = isDiffEncoding ? Math.min(zMax, resultPixelsPrevDim[outPtr] + offset) : offset;\n                        outPtr++;\n                      }\n                      outPtr += outStride;\n                    }\n                  }\n                }\n                else { //bitstuff encoding is 3\n                  data.ptr += blockPtr;\n                  //heavy lifting\n                  Lerc2Helpers.decodeBits(input, data, blockDataBuffer, offset, iDim);\n                  blockPtr = 0;\n                  // duplicate code to favor performance, diff encoding is for multidimension only\n                  if (isDiffEncoding) {\n                    if (mask) {\n                      for (row = 0; row < thisBlockHeight; row++) {\n                        for (col = 0; col < thisBlockWidth; col++) {\n                          if (mask[outPtr]) {\n                            resultPixels[outPtr] = blockDataBuffer[blockPtr++] + resultPixelsPrevDim[outPtr];\n                          }\n                          outPtr++;\n                        }\n                        outPtr += outStride;\n                      }\n                    }\n                    else {\n                      for (row = 0; row < thisBlockHeight; row++) {\n                        for (col = 0; col < thisBlockWidth; col++) {\n                          resultPixels[outPtr] = blockDataBuffer[blockPtr++] + resultPixelsPrevDim[outPtr];\n                          outPtr++;\n                        }\n                        outPtr += outStride;\n                      }\n                    }\n                  }\n                  else if (mask) {\n                    for (row = 0; row < thisBlockHeight; row++) {\n                      for (col = 0; col < thisBlockWidth; col++) {\n                        if (mask[outPtr]) {\n                          resultPixels[outPtr] = blockDataBuffer[blockPtr++];\n                        }\n                        outPtr++;\n                      }\n                      outPtr += outStride;\n                    }\n                  }\n                  else {\n                    for (row = 0; row < thisBlockHeight; row++) {\n                      for (col = 0; col < thisBlockWidth; col++) {\n                        resultPixels[outPtr++] = blockDataBuffer[blockPtr++];\n                      }\n                      outPtr += outStride;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        //swap for BIP: it's always easier for clients to handle BSQ so we keep existing logic and introduce a swap here to minimze changes\n        if (numDims > 1 && !useBSQForOutputDim) {\n          data.pixels.resultPixels = Lerc2Helpers.swapDimensionOrder(data.pixels.resultPixels, numPixels, numDims, OutPixelTypeArray);\n        }\n      },\n\n      /*****************\n      *  private methods (helper methods)\n      *****************/\n\n      formatFileInfo: function(data) {\n        return {\n          \"fileIdentifierString\": data.headerInfo.fileIdentifierString,\n          \"fileVersion\": data.headerInfo.fileVersion,\n          \"imageType\": data.headerInfo.imageType,\n          \"height\": data.headerInfo.height,\n          \"width\": data.headerInfo.width,\n          \"numValidPixel\": data.headerInfo.numValidPixel,\n          \"microBlockSize\": data.headerInfo.microBlockSize,\n          \"blobSize\": data.headerInfo.blobSize,\n          \"maxZError\": data.headerInfo.maxZError,\n          \"pixelType\": Lerc2Helpers.getPixelType(data.headerInfo.imageType),\n          \"eofOffset\": data.eofOffset,\n          \"mask\": data.mask ? {\n            \"numBytes\": data.mask.numBytes\n          } : null,\n          \"pixels\": {\n            \"numBlocksX\": data.pixels.numBlocksX,\n            \"numBlocksY\": data.pixels.numBlocksY,\n            //\"numBytes\": data.pixels.numBytes,\n            \"maxValue\": data.headerInfo.zMax,\n            \"minValue\": data.headerInfo.zMin,\n            \"noDataValue\": data.noDataValue\n          }\n        };\n      },\n\n      constructConstantSurface: function(data, useBSQForOutputDim) {\n        var val = data.headerInfo.zMax;\n        var valMin = data.headerInfo.zMin;\n        var maxValues = data.headerInfo.maxValues;\n        var numDims = data.headerInfo.numDims;\n        var numPixels = data.headerInfo.height * data.headerInfo.width;\n        var i = 0, k = 0, nStart = 0;\n        var mask = data.pixels.resultMask;\n        var resultPixels = data.pixels.resultPixels;\n        if (mask) {\n          if (numDims > 1) {\n            if (useBSQForOutputDim) {\n              for (i = 0; i < numDims; i++) {\n                nStart = i * numPixels;\n                val = maxValues[i];\n                for (k = 0; k < numPixels; k++) {\n                  if (mask[k]) {\n                    resultPixels[nStart + k] = val;\n                  }\n                }\n              }  \n            }\n            else {\n              for (k = 0; k < numPixels; k++) {\n                if (mask[k]) {\n                  nStart = k * numDims;\n                  for (i = 0; i < numDims; i++) {\n                    resultPixels[nStart + numDims] = maxValues[i];\n                  }\n                }\n              }\n            }\n          }\n          else {\n            for (k = 0; k < numPixels; k++) {\n              if (mask[k]) {\n                resultPixels[k] = val;\n              }\n            }\n          }\n        }\n        else {\n          if (numDims > 1 && valMin !== val) {\n            if (useBSQForOutputDim) {\n              for (i = 0; i < numDims; i++) {\n                nStart = i * numPixels;\n                val = maxValues[i];\n                for (k = 0; k < numPixels; k++) {\n                  resultPixels[nStart + k] = val;\n                }\n              }\n            }\n            else {\n              for (k = 0; k < numPixels; k++) {\n                nStart = k * numDims;\n                for (i = 0; i < numDims; i++) {\n                  resultPixels[nStart + i] = maxValues[i];\n                }\n              }\n            }\n          }\n          else {\n            for (k = 0; k < numPixels * numDims; k++) {\n              resultPixels[k] = val;\n            }\n          }\n        }\n        return;\n      },\n\n      getDataTypeArray: function(t) {\n        var tp;\n        switch (t) {\n          case 0: //char\n            tp = Int8Array;\n            break;\n          case 1: //byte\n            tp = Uint8Array;\n            break;\n          case 2: //short\n            tp = Int16Array;\n            break;\n          case 3: //ushort\n            tp = Uint16Array;\n            break;\n          case 4:\n            tp = Int32Array;\n            break;\n          case 5:\n            tp = Uint32Array;\n            break;\n          case 6:\n            tp = Float32Array;\n            break;\n          case 7:\n            tp = Float64Array;\n            break;\n          default:\n            tp = Float32Array;\n        }\n        return tp;\n      },\n\n      getPixelType: function(t) {\n        var tp;\n        switch (t) {\n          case 0: //char\n            tp = \"S8\";\n            break;\n          case 1: //byte\n            tp = \"U8\";\n            break;\n          case 2: //short\n            tp = \"S16\";\n            break;\n          case 3: //ushort\n            tp = \"U16\";\n            break;\n          case 4:\n            tp = \"S32\";\n            break;\n          case 5:\n            tp = \"U32\";\n            break;\n          case 6:\n            tp = \"F32\";\n            break;\n          case 7:\n            tp = \"F64\";\n            break;\n          default:\n            tp = \"F32\";\n        }\n        return tp;\n      },\n\n      isValidPixelValue: function(t, val) {\n        if (val == null) {\n          return false;\n        }\n        var isValid;\n        switch (t) {\n          case 0: //char\n            isValid = val >= -128 && val <= 127;\n            break;\n          case 1: //byte  (unsigned char)\n            isValid = val >= 0 && val <= 255;\n            break;\n          case 2: //short\n            isValid = val >= -32768 && val <= 32767;\n            break;\n          case 3: //ushort\n            isValid = val >= 0 && val <= 65536;\n            break;\n          case 4: //int 32\n            isValid = val >= -2147483648 && val <= 2147483647;\n            break;\n          case 5: //uinit 32\n            isValid = val >= 0 && val <= 4294967296;\n            break;\n          case 6:\n            isValid = val >= -3.4027999387901484e+38 && val <= 3.4027999387901484e+38;\n            break;\n          case 7:\n            isValid = val >= -1.7976931348623157e+308 && val <= 1.7976931348623157e+308;\n            break;\n          default:\n            isValid = false;\n        }\n        return isValid;\n      },\n\n      getDataTypeSize: function(t) {\n        var s = 0;\n        switch (t) {\n          case 0: //ubyte\n          case 1: //byte\n            s = 1;\n            break;\n          case 2: //short\n          case 3: //ushort\n            s = 2;\n            break;\n          case 4:\n          case 5:\n          case 6:\n            s = 4;\n            break;\n          case 7:\n            s = 8;\n            break;\n          default:\n            s = t;\n        }\n        return s;\n      },\n\n      getDataTypeUsed: function(dt, tc) {\n        var t = dt;\n        switch (dt) {\n          case 2: //short\n          case 4: //long\n            t = dt - tc;\n            break;\n          case 3: //ushort\n          case 5: //ulong\n            t = dt - 2 * tc;\n            break;\n          case 6: //float\n            if (0 === tc) {\n              t = dt;\n            }\n            else if (1 === tc) {\n              t = 2;\n            }\n            else {\n              t = 1;//byte\n            }\n            break;\n          case 7: //double\n            if (0 === tc) {\n              t = dt;\n            }\n            else {\n              t = dt - 2 * tc + 1;\n            }\n            break;\n          default:\n            t = dt;\n            break;\n        }\n        return t;\n      },\n\n      getOnePixel: function(block, blockPtr, offsetType, view) {\n        var temp = 0;\n        switch (offsetType) {\n          case 0: //char\n            temp = view.getInt8(blockPtr);\n            break;\n          case 1: //byte\n            temp = view.getUint8(blockPtr);\n            break;\n          case 2:\n            temp = view.getInt16(blockPtr, true);\n            break;\n          case 3:\n            temp = view.getUint16(blockPtr, true);\n            break;\n          case 4:\n            temp = view.getInt32(blockPtr, true);\n            break;\n          case 5:\n            temp = view.getUInt32(blockPtr, true);\n            break;\n          case 6:\n            temp = view.getFloat32(blockPtr, true);\n            break;\n          case 7:\n            temp = view.getFloat64(blockPtr, true);\n            break;\n          default:\n            throw (\"the decoder does not understand this pixel type\");\n        }\n        return temp;\n      },\n\n      swapDimensionOrder: function(pixels, numPixels, numDims, OutPixelTypeArray, inputIsBIP) {\n        var i = 0, j = 0, iDim = 0, temp = 0, swap = pixels;\n        if (numDims > 1) {\n          swap = new OutPixelTypeArray(numPixels * numDims);\n          if (inputIsBIP) {\n            for (i=0; i<numPixels; i++) {\n              temp = i;\n              for (iDim=0; iDim < numDims; iDim++, temp += numPixels) {\n                swap[temp] = pixels[j++];\n              }\n            }  \n          }\n          else {\n            for (i=0; i<numPixels; i++) {\n              temp = i;\n              for (iDim=0; iDim < numDims; iDim++, temp += numPixels) {\n                swap[j++] = pixels[temp];\n              }\n            }\n          }\n        }\n        return swap;\n      }\n    };\n\n    /***************************************************\n    *private class for a tree node. Huffman code is in Lerc2Helpers\n    ****************************************************/\n    var TreeNode = function(val, left, right) {\n      this.val = val;\n      this.left = left;\n      this.right = right;\n    };\n\n    var Lerc2Decode = {\n      /*\n      * ********removed options compared to LERC1. We can bring some of them back if needed.\n       * removed pixel type. LERC2 is typed and doesn't require user to give pixel type\n       * changed encodedMaskData to maskData. LERC2 's js version make it faster to use maskData directly.\n       * removed returnMask. mask is used by LERC2 internally and is cost free. In case of user input mask, it's returned as well and has neglible cost.\n       * removed nodatavalue. Because LERC2 pixels are typed, nodatavalue will sacrify a useful value for many types (8bit, 16bit) etc,\n       *       user has to be knowledgable enough about raster and their data to avoid usability issues. so nodata value is simply removed now.\n       *       We can add it back later if their's a clear requirement.\n       * removed encodedMask. This option was not implemented in LercDecode. It can be done after decoding (less efficient)\n       * removed computeUsedBitDepths.\n       *\n       *\n       * response changes compared to LERC1\n       * 1. encodedMaskData is not available\n       * 2. noDataValue is optional (returns only if user's noDataValue is with in the valid data type range)\n       * 3. maskData is always available\n      */\n      /*****************\n      *  public properties\n      ******************/\n      //HUFFMAN_LUT_BITS_MAX: 12, //use 2^12 lut, not configurable\n\n      /*****************\n      *  public methods\n      *****************/\n\n      /**\n       * Decode a LERC2 byte stream and return an object containing the pixel data and optional metadata.\n       *\n       * @param {ArrayBuffer} input The LERC input byte stream\n       * @param {object} [options] options Decoding options\n       * @param {number} [options.inputOffset] The number of bytes to skip in the input byte stream. A valid LERC file is expected at that position\n       * @param {boolean} [options.returnFileInfo] If true, the return value will have a fileInfo property that contains metadata obtained from the LERC headers and the decoding process\n       * @param {boolean} [options.returnPixelInterleavedDims]  If true, returned dimensions are pixel-interleaved, a.k.a [p1_dim0, p1_dim1, p1_dimn, p2_dim0...], default is [p1_dim0, p2_dim0, ..., p1_dim1, p2_dim1...]\n       */\n      decode: function(/*byte array*/ input, /*object*/ options) {\n        //currently there's a bug in the sparse array, so please do not set to false\n        options = options || {};\n        var noDataValue = options.noDataValue;\n\n        //initialize\n        var i = 0, data = {};\n        data.ptr = options.inputOffset || 0;\n        data.pixels = {};\n\n        // File header\n        if (!Lerc2Helpers.readHeaderInfo(input, data)) {\n          return;\n        }\n\n        var headerInfo = data.headerInfo;\n        var fileVersion = headerInfo.fileVersion;\n        var OutPixelTypeArray = Lerc2Helpers.getDataTypeArray(headerInfo.imageType);\n\n        // version check\n        if (fileVersion > 5) {\n          throw \"unsupported lerc version 2.\" + fileVersion;\n        }\n\n        // Mask Header\n        Lerc2Helpers.readMask(input, data);\n        if (headerInfo.numValidPixel !== headerInfo.width * headerInfo.height && !data.pixels.resultMask) {\n          data.pixels.resultMask = options.maskData;\n        }\n\n        var numPixels = headerInfo.width * headerInfo.height;\n        data.pixels.resultPixels = new OutPixelTypeArray(numPixels * headerInfo.numDims);\n\n        data.counter = {\n          onesweep: 0,\n          uncompressed: 0,\n          lut: 0,\n          bitstuffer: 0,\n          constant: 0,\n          constantoffset: 0\n        };\n        var useBSQForOutputDim = !options.returnPixelInterleavedDims;\n        if (headerInfo.numValidPixel !== 0) {\n          //not tested\n          if (headerInfo.zMax === headerInfo.zMin) //constant surface\n          {\n            Lerc2Helpers.constructConstantSurface(data, useBSQForOutputDim);\n          }\n          else if (fileVersion >= 4 && Lerc2Helpers.checkMinMaxRanges(input, data)) {\n            Lerc2Helpers.constructConstantSurface(data, useBSQForOutputDim);\n          }\n          else {\n            var view = new DataView(input, data.ptr, 2);\n            var bReadDataOneSweep = view.getUint8(0);\n            data.ptr++;\n            if (bReadDataOneSweep) {\n              //console.debug(\"OneSweep\");\n              Lerc2Helpers.readDataOneSweep(input, data, OutPixelTypeArray, useBSQForOutputDim);\n            }\n            else {\n              //lerc2.1: //bitstuffing + lut\n              //lerc2.2: //bitstuffing + lut + huffman\n              //lerc2.3: new bitstuffer\n              if (fileVersion > 1 && headerInfo.imageType <= 1 && Math.abs(headerInfo.maxZError - 0.5) < 0.00001) {\n                //this is 2.x plus 8 bit (unsigned and signed) data, possiblity of Huffman\n                var flagHuffman = view.getUint8(1);\n                data.ptr++;\n                data.encodeMode = flagHuffman;\n                if (flagHuffman > 2 || (fileVersion < 4 && flagHuffman > 1)) {\n                  throw \"Invalid Huffman flag \" + flagHuffman;\n                }\n                if (flagHuffman) {//1 - delta Huffman, 2 - Huffman\n                  //console.log(\"Huffman\");\n                  Lerc2Helpers.readHuffman(input, data, OutPixelTypeArray, useBSQForOutputDim);\n                }\n                else {\n                  //console.log(\"Tiles\");\n                  Lerc2Helpers.readTiles(input, data, OutPixelTypeArray, useBSQForOutputDim);\n                }\n              }\n              else { //lerc2.x non-8 bit data\n                //console.log(\"Tiles\");\n                Lerc2Helpers.readTiles(input, data, OutPixelTypeArray, useBSQForOutputDim);\n              }\n            }\n          }\n        }\n\n        data.eofOffset = data.ptr;\n        var diff;\n        if (options.inputOffset) {\n          diff = data.headerInfo.blobSize + options.inputOffset - data.ptr;\n          if (Math.abs(diff) >= 1) {\n            //console.debug(\"incorrect eof: dataptr \" + data.ptr + \" offset \" + options.inputOffset + \" blobsize \" + data.headerInfo.blobSize + \" diff: \" + diff);\n            data.eofOffset = options.inputOffset + data.headerInfo.blobSize;\n          }\n        }\n        else {\n          diff = data.headerInfo.blobSize - data.ptr;\n          if (Math.abs(diff) >= 1) {\n            //console.debug(\"incorrect first band eof: dataptr \" + data.ptr + \" blobsize \" + data.headerInfo.blobSize + \" diff: \" + diff);\n            data.eofOffset = data.headerInfo.blobSize;\n          }\n        }\n\n        var result = {\n          width: headerInfo.width,\n          height: headerInfo.height,\n          pixelData: data.pixels.resultPixels,\n          minValue: headerInfo.zMin,\n          maxValue: headerInfo.zMax,\n          validPixelCount: headerInfo.numValidPixel,\n          dimCount: headerInfo.numDims,\n          dimStats: {\n            minValues: headerInfo.minValues,\n            maxValues: headerInfo.maxValues\n          },\n          maskData: data.pixels.resultMask\n          //noDataValue: noDataValue\n        };\n\n        //we should remove this if there's no existing client\n        //optional noDataValue processing, it's user's responsiblity\n        if (data.pixels.resultMask && Lerc2Helpers.isValidPixelValue(headerInfo.imageType, noDataValue)) {\n          var mask = data.pixels.resultMask;\n          for (i = 0; i < numPixels; i++) {\n            if (!mask[i]) {\n              result.pixelData[i] = noDataValue;\n            }\n          }\n          result.noDataValue = noDataValue;\n        }\n        data.noDataValue = noDataValue;\n        if (options.returnFileInfo) {\n          result.fileInfo = Lerc2Helpers.formatFileInfo(data);\n        }\n        return result;\n      },\n\n      getBandCount: function(/*byte array*/ input) {\n        var count = 0;\n        var i = 0;\n        var temp = {};\n        temp.ptr = 0;\n        temp.pixels = {};\n        while (i < input.byteLength - 58) {\n          Lerc2Helpers.readHeaderInfo(input, temp);\n          i += temp.headerInfo.blobSize;\n          count++;\n          temp.ptr = i;\n        }\n        return count;\n      }\n    };\n\n    return Lerc2Decode;\n  })();\n\n  var isPlatformLittleEndian = (function() {\n    var a = new ArrayBuffer(4);\n    var b = new Uint8Array(a);\n    var c = new Uint32Array(a);\n    c[0] = 1;\n    return b[0] === 1;\n  })();\n\n  var Lerc = {\n    /************wrapper**********************************************/\n    /**\n     * A wrapper for decoding both LERC1 and LERC2 byte streams capable of handling multiband pixel blocks for various pixel types.\n     *\n     * @alias module:Lerc\n     * @param {ArrayBuffer} input The LERC input byte stream\n     * @param {object} [options] The decoding options below are optional.\n     * @param {number} [options.inputOffset] The number of bytes to skip in the input byte stream. A valid Lerc file is expected at that position.\n     * @param {string} [options.pixelType] (LERC1 only) Default value is F32. Valid pixel types for input are U8/S8/S16/U16/S32/U32/F32.\n     * @param {number} [options.noDataValue] (LERC1 only). It is recommended to use the returned mask instead of setting this value.\n     * @param {boolean} [options.returnPixelInterleavedDims] (nDim LERC2 only) If true, returned dimensions are pixel-interleaved, a.k.a [p1_dim0, p1_dim1, p1_dimn, p2_dim0...], default is [p1_dim0, p2_dim0, ..., p1_dim1, p2_dim1...]\n     * @returns {{width, height, pixels, pixelType, mask, statistics}}\n       * @property {number} width Width of decoded image.\n       * @property {number} height Height of decoded image.\n       * @property {array} pixels [band1, band2, …] Each band is a typed array of width*height.\n       * @property {string} pixelType The type of pixels represented in the output.\n       * @property {mask} mask Typed array with a size of width*height, or null if all pixels are valid.\n       * @property {array} statistics [statistics_band1, statistics_band2, …] Each element is a statistics object representing min and max values\n    **/\n    decode: function(encodedData, options) {\n      if (!isPlatformLittleEndian) {\n        throw \"Big endian system is not supported.\";\n      }\n      options = options || {};\n      var inputOffset = options.inputOffset || 0;\n      var fileIdView = new Uint8Array(encodedData, inputOffset, 10);\n      var fileIdentifierString = String.fromCharCode.apply(null, fileIdView);\n      var lerc, majorVersion;\n      if (fileIdentifierString.trim() === \"CntZImage\") {\n        lerc = LercDecode;\n        majorVersion = 1;\n      }\n      else if (fileIdentifierString.substring(0, 5) === \"Lerc2\") {\n        lerc = Lerc2Decode;\n        majorVersion = 2;\n      }\n      else {\n        throw \"Unexpected file identifier string: \" + fileIdentifierString;\n      }\n\n      var iPlane = 0, eof = encodedData.byteLength - 10, encodedMaskData, bandMasks = [], bandMask, maskData;\n      var decodedPixelBlock = {\n        width: 0,\n        height: 0,\n        pixels: [],\n        pixelType: options.pixelType,\n        mask: null,\n        statistics: []\n      };\n      var uniqueBandMaskCount = 0;\n\n      while (inputOffset < eof) {\n        var result = lerc.decode(encodedData, {\n          inputOffset: inputOffset,//for both lerc1 and lerc2\n          encodedMaskData: encodedMaskData,//lerc1 only\n          maskData: maskData,//lerc2 only\n          returnMask: iPlane === 0 ? true : false,//lerc1 only\n          returnEncodedMask: iPlane === 0 ? true : false,//lerc1 only\n          returnFileInfo: true,//for both lerc1 and lerc2\n          returnPixelInterleavedDims: options.returnPixelInterleavedDims,//for ndim lerc2 only\n          pixelType: options.pixelType || null,//lerc1 only\n          noDataValue: options.noDataValue || null//lerc1 only\n        });\n\n        inputOffset = result.fileInfo.eofOffset;\n        maskData = result.maskData;//lerc2\n        if (iPlane === 0) {\n          encodedMaskData = result.encodedMaskData;//lerc1\n          decodedPixelBlock.width = result.width;\n          decodedPixelBlock.height = result.height;\n          decodedPixelBlock.dimCount = result.dimCount || 1;\n          //decodedPixelBlock.dimStats = decodedPixelBlock.dimStats;\n          decodedPixelBlock.pixelType = result.pixelType || result.fileInfo.pixelType;\n          decodedPixelBlock.mask = maskData;\n        }\n        if (majorVersion > 1) {\n          if (maskData) {\n            bandMasks.push(maskData);\n          }\n          if (result.fileInfo.mask && result.fileInfo.mask.numBytes > 0) {\n            uniqueBandMaskCount++;\n          }\n        }\n\n        iPlane++;\n        decodedPixelBlock.pixels.push(result.pixelData);\n        decodedPixelBlock.statistics.push({\n          minValue: result.minValue,\n          maxValue: result.maxValue,\n          noDataValue: result.noDataValue,\n          dimStats: result.dimStats\n        });\n      }\n      var i, j, numPixels;\n      if (majorVersion > 1 && uniqueBandMaskCount > 1) {\n        numPixels = decodedPixelBlock.width * decodedPixelBlock.height;\n        decodedPixelBlock.bandMasks = bandMasks;\n        maskData = new Uint8Array(numPixels);\n        maskData.set(bandMasks[0]);\n        for (i = 1; i < bandMasks.length; i++) {\n          bandMask = bandMasks[i];\n          for (j = 0; j < numPixels; j++) {\n            maskData[j] = maskData[j] & bandMask[j];\n          }\n        }\n        decodedPixelBlock.maskData = maskData;\n      }\n\n      return decodedPixelBlock;\n    }\n  };\n\n  if (typeof define === \"function\" && define.amd) {/* jshint ignore:line */\n    //amd loaders such as dojo and requireJS\n    //http://wiki.commonjs.org/wiki/Modules/AsynchronousDefinition\n    define([], function() { return Lerc; });/* jshint ignore:line */\n  }\n  else if (typeof module !== \"undefined\" && module.exports) {/* jshint ignore:line */\n    //commonJS module 1.0/1.1/1.1.1 systems, such as nodeJS\n    //http://wiki.commonjs.org/wiki/Modules\n    module.exports = Lerc;/* jshint ignore:line */\n  }\n  else {\n    //assign to this, most likely window\n    this.Lerc = Lerc;\n  }\n\n})();\n","let init;\nlet instance;\nlet heap;\nconst IMPORT_OBJECT = {\n  env: {\n    emscripten_notify_memory_growth: function (index) {\n      heap = new Uint8Array(instance.exports.memory.buffer);\n    }\n  }\n};\n/**\r\n * ZSTD (Zstandard) decoder.\r\n */\nclass ZSTDDecoder {\n  init() {\n    if (init) return init;\n    if (typeof fetch !== 'undefined') {\n      // Web.\n      init = fetch('data:application/wasm;base64,' + wasm).then(response => response.arrayBuffer()).then(arrayBuffer => WebAssembly.instantiate(arrayBuffer, IMPORT_OBJECT)).then(this._init);\n    } else {\n      // Node.js.\n      init = WebAssembly.instantiate(Buffer.from(wasm, 'base64'), IMPORT_OBJECT).then(this._init);\n    }\n    return init;\n  }\n  _init(result) {\n    instance = result.instance;\n    IMPORT_OBJECT.env.emscripten_notify_memory_growth(0); // initialize heap.\n  }\n\n  decode(array, uncompressedSize = 0) {\n    if (!instance) throw new Error(`ZSTDDecoder: Await .init() before decoding.`);\n    // Write compressed data into WASM memory.\n    const compressedSize = array.byteLength;\n    const compressedPtr = instance.exports.malloc(compressedSize);\n    heap.set(array, compressedPtr);\n    // Decompress into WASM memory.\n    uncompressedSize = uncompressedSize || Number(instance.exports.ZSTD_findDecompressedSize(compressedPtr, compressedSize));\n    const uncompressedPtr = instance.exports.malloc(uncompressedSize);\n    const actualSize = instance.exports.ZSTD_decompress(uncompressedPtr, uncompressedSize, compressedPtr, compressedSize);\n    // Read decompressed data and free WASM memory.\n    const dec = heap.slice(uncompressedPtr, uncompressedPtr + actualSize);\n    instance.exports.free(compressedPtr);\n    instance.exports.free(uncompressedPtr);\n    return dec;\n  }\n}\n/**\r\n * BSD License\r\n *\r\n * For Zstandard software\r\n *\r\n * Copyright (c) 2016-present, Yann Collet, Facebook, Inc. All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *    list of conditions and the following disclaimer.\r\n *\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n *  * Neither the name Facebook nor the names of its contributors may be used to\r\n *    endorse or promote products derived from this software without specific\r\n *    prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\r\n * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\r\n * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n */\n// wasm:begin\nconst wasm = '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IAMNACAEQQNxBEADQCACRQ0FIAAgAkF/aiICaiIDIAEgAmotAAA6AAAgA0EDcQ0ACwsgAkEDTQ0AA0AgACACQXxqIgJqIAEgAmooAgA2AgAgAkEDSw0ACwsgAkUNAgNAIAAgAkF/aiICaiABIAJqLQAAOgAAIAINAAsMAgsgAkEDTQ0AIAIhBANAIAMgASgCADYCACABQQRqIQEgA0EEaiEDIARBfGoiBEEDSw0ACyACQQNxIQILIAJFDQADQCADIAEtAAA6AAAgA0EBaiEDIAFBAWohASACQX9qIgINAAsLIAAL8wICAn8BfgJAIAJFDQAgACACaiIDQX9qIAE6AAAgACABOgAAIAJBA0kNACADQX5qIAE6AAAgACABOgABIANBfWogAToAACAAIAE6AAIgAkEHSQ0AIANBfGogAToAACAAIAE6AAMgAkEJSQ0AIABBACAAa0EDcSIEaiIDIAFB/wFxQYGChAhsIgE2AgAgAyACIARrQXxxIgRqIgJBfGogATYCACAEQQlJDQAgAyABNgIIIAMgATYCBCACQXhqIAE2AgAgAkF0aiABNgIAIARBGUkNACADIAE2AhggAyABNgIUIAMgATYCECADIAE2AgwgAkFwaiABNgIAIAJBbGogATYCACACQWhqIAE2AgAgAkFkaiABNgIAIAQgA0EEcUEYciIEayICQSBJDQAgAa0iBUIghiAFhCEFIAMgBGohAQNAIAEgBTcDGCABIAU3AxAgASAFNwMIIAEgBTcDACABQSBqIQEgAkFgaiICQR9LDQALCyAACy8BAn8gACgCBCAAKAIAQQJ0aiICLQACIQMgACACLwEAIAEgAi0AAxAIajYCACADCy8BAn8gACgCBCAAKAIAQQJ0aiICLQACIQMgACACLwEAIAEgAi0AAxAFajYCACADCx8AIAAgASACKAIEEAg2AgAgARAEGiAAIAJBCGo2AgQLCAAgAGdBH3MLugUBDX8jAEEQayIKJAACfyAEQQNNBEAgCkEANgIMIApBDGogAyAEEAsaIAAgASACIApBDGpBBBAVIgBBbCAAEAMbIAAgACAESxsMAQsgAEEAIAEoAgBBAXRBAmoQECENQVQgAygAACIGQQ9xIgBBCksNABogAiAAQQVqNgIAIAMgBGoiAkF8aiEMIAJBeWohDiACQXtqIRAgAEEGaiELQQQh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ASIDNgLE4AEgACgCvOABIQQgACABNgK84AEgACABIAJqNgK44AEgACABIAQgA2tqNgLA4AELpgEBAX8gACAAKALs4QEQFjYCyOABIABCADcD+OABIABCADcDuOABIABBwOABakIANwMAIABBqNAAaiIBQYyAgOAANgIAIABBADYCmOIBIABCADcDiOEBIABCAzcDgOEBIABBrNABakHgEikCADcCACAAQbTQAWpB6BIoAgA2AgAgACABNgIMIAAgAEGYIGo2AgggACAAQaAwajYCBCAAIABBEGo2AgALYQEBf0G4fyEDAkAgAUEDSQ0AIAIgABAhIgFBA3YiADYCCCACIAFBAXE2AgQgAiABQQF2QQNxIgM2AgACQCADQX9qIgFBAksNAAJAIAFBAWsOAgEAAgtBbA8LIAAhAwsgAwsMACAAIAEgAkEAEC4LiAQCA38CfiADEBYhBCAAQQBBKBAQIQAgBCACSwRAIAQPCyABRQRAQX8PCwJAAkAgA0EBRg0AIAEoAAAiBkGo6r5pRg0AQXYhAyAGQXBxQdDUtMIBRw0BQQghAyACQQhJDQEgAEEAQSgQECEAIAEoAAQhASAAQQE2AhQgACABrTcDAEEADwsgASACIAMQLyIDIAJLDQAgACADNgIYQXIhAyABIARqIgVBf2otAAAiAkEIcQ0AIAJBIHEiBkUEQEFwIQMgBS0AACIFQacBSw0BIAVBB3GtQgEgBUEDdkEKaq2GIgdCA4h+IAd8IQggBEEBaiEECyACQQZ2IQMgAkECdiEFAkAgAkEDcUF/aiICQQJLBEBBACECDAELAkACQAJAIAJBAWsOAgECAAsgASAEai0AACECIARBAWohBAwCCyABIARqLwAAIQIgBEECaiEEDAELIAEgBGooAAAhAiAEQQRqIQQLIAVBAXEhBQJ+AkACQAJAIANBf2oiA0ECTQRAIANBAWsOAgIDAQtCfyAGRQ0DGiABIARqMQAADAMLIAEgBGovAACtQoACfAwCCyABIARqKAAArQwBCyABIARqKQAACyEHIAAgBTYCICAAIAI2AhwgACAHNwMAQQAhAyAAQQA2AhQgACAHIAggBhsiBzcDCCAAIAdCgIAIIAdCgIAIVBs+AhALIAMLWwEBf0G4fyEDIAIQFiICIAFNBH8gACACakF/ai0AACIAQQNxQQJ0QaAeaigCACACaiAAQQZ2IgFBAnRBsB5qKAIAaiAAQSBxIgBFaiABRSAAQQV2cWoFQbh/CwsdACAAKAKQ4gEQWiAAQQA2AqDiASAAQgA3A5DiAQu1AwEFfyMAQZACayIKJABBuH8hBgJAIAVFDQAgBCwAACIIQf8BcSEHAkAgCEF/TARAIAdBgn9qQQF2IgggBU8NAkFsIQYgB0GBf2oiBUGAAk8NAiAEQQFqIQdBACEGA0AgBiAFTwRAIAUhBiAIIQcMAwUgACAGaiAHIAZBAXZqIgQtAABBBHY6AAAgACAGQQFyaiAELQAAQQ9xOgAAIAZBAmohBgwBCwAACwALIAcgBU8NASAAIARBAWogByAKEFMiBhADDQELIAYhBEEAIQYgAUEAQTQQECEJQQAhBQNAIAQgBkcEQCAAIAZqIggtAAAiAUELSwRAQWwhBgwDBSAJIAFBAnRqIgEgASgCAEEBajYCACAGQQFqIQZBASAILQAAdEEBdSAFaiEFDAILAAsLQWwhBiAFRQ0AIAUQFEEBaiIBQQxLDQAgAyABNgIAQQFBASABdCAFayIDEBQiAXQgA0cNACAAIARqIAFBAWoiADoAACAJIABBAnRqIgAgACgCAEEBajYCACAJKAIEIgBBAkkgAEEBcXINACACIARBAWo2AgAgB0EBaiEGCyAKQZACaiQAIAYLxhEBDH8jAEHwAGsiBSQAQWwhCwJAIANBCkkNACACLwAAIQogAi8AAiEJIAIvAAQhByAFQQhqIAQQDgJAIAMgByAJIApqakEGaiIMSQ0AIAUtAAohCCAFQdgAaiACQQZqIgIgChAGIgsQAw0BIAVBQGsgAiAKaiICIAkQBiILEAMNASAFQShqIAIgCWoiAiAHEAYiCxADDQEgBUEQaiACIAdqIAMgDGsQBiILEAMNASAAIAFqIg9BfWohECAEQQRqIQZBASELIAAgAUEDakECdiIDaiIMIANqIgIgA2oiDiEDIAIhBCAMIQcDQCALIAMgEElxBEAgACAGIAVB2ABqIAgQAkECdGoiCS8BADsAACAFQdgAaiAJLQACEAEgCS0AAyELIAcgBiAFQUBrIAgQAkECdGoiCS8BADsAACAFQUBrIAktAAIQASAJLQADIQogBCAGIAVBKGogCBACQQJ0aiIJLwEAOwAAIAVBKGogCS0AAhABIAktAAMhCSADIAYgBUEQaiAIEAJBAnRqIg0vAQA7AAAgBUEQaiANLQACEAEgDS0AAyENIAAgC2oiCyAGIAVB2ABqIAgQAkECdGoiAC8BADsAACAFQdgAaiAALQACEAEgAC0AAyEAIAcgCmoiCiAGIAVBQGsgCBACQQJ0aiIHLwEAOwAAIAVBQGsgBy0AAhABIActAAMhByAEIAlqIgkgBiAFQShqIAgQAkECdGoiBC8BADsAACAFQShqIAQtAAIQASAELQADIQQgAyANaiIDIAYgBUEQaiAIEAJBAnRqIg0vAQA7AAAgBUEQaiANLQACEAEgACALaiEAIAcgCmohByAEIAlqIQQgAyANLQADaiEDIAVB2ABqEA0gBUFAaxANciAFQShqEA1yIAVBEGoQDXJFIQsMAQsLIAQgDksgByACS3INAEFsIQsgACAMSw0BIAxBfWohCQNAQQAgACAJSSAFQdgAahAEGwRAIAAgBiAFQdgAaiAIEAJBAnRqIgovAQA7AAAgBUHYAGogCi0AAhABIAAgCi0AA2oiACAGIAVB2ABqIAgQAkECdGoiCi8BADsAACAFQdgAaiAKLQACEAEgACAKLQADaiEADAEFIAxBfmohCgNAIAVB2ABqEAQgACAKS3JFBEAgACAGIAVB2ABqIAgQAkECdGoiCS8BADsAACAFQdgAaiAJLQACEAEgACAJLQADaiEADAELCwNAIAAgCk0EQCAAIAYgBUHYAGogCBACQQJ0aiIJLwEAOwAAIAVB2ABqIAktAAIQASAAIAktAANqIQAMAQsLAkAgACAMTw0AIAAgBiAFQdgAaiAIEAIiAEECdGoiDC0AADoAACAMLQADQQFGBEAgBUHYAGogDC0AAhABDAELIAUoAlxBH0sNACAFQdgAaiAGIABBAnRqLQACEAEgBSgCXEEhSQ0AIAVBIDYCXAsgAkF9aiEMA0BBACAHIAxJIAVBQGsQBBsEQCAHIAYgBUFAayAIEAJBAnRqIgAvAQA7AAAgBUFAayAALQACEAEgByAALQADaiIAIAYgBUFAayAIEAJBAnRqIgcvAQA7AAAgBUFAayAHLQACEAEgACAHLQADaiEHDAEFIAJBfmohDANAIAVBQGsQBCAHIAxLckUEQCAHIAYgBUFAayAIEAJBAnRqIgAvAQA7AAAgBUFAayAALQACEAEgByAALQADaiEHDAELCwNAIAcgDE0EQCAHIAYgBUFAayAIEAJBAnRqIgAvAQA7AAAgBUFAayAALQACEAEgByAALQADaiEHDAELCwJAIAcgAk8NACAHIAYgBUFAayAIEAIiAEECdGoiAi0AADoAACACLQADQQFGBEAgBUFAayACLQACEAEMAQsgBSgCREEfSw0AIAVBQGsgBiAAQQJ0ai0AAhABIAUoAkRBIUkNACAFQSA2AkQLIA5BfWohAgNAQQAgBCACSSAFQShqEAQbBEAgBCAGIAVBKGogCBACQQJ0aiIALwEAOwAAIAVBKGogAC0AAhABIAQgAC0AA2oiACAGIAVBKGogCBACQQJ0aiIELwEAOwAAIAVBKGogBC0AAhABIAAgBC0AA2ohBAwBBSAOQX5qIQIDQCAFQShqEAQgBCACS3JFBEAgBCAGIAVBKGogCBACQQJ0aiIALwEAOwAAIAVBKGogAC0AAhABIAQgAC0AA2ohBAwBCwsDQCAEIAJNBEAgBCAGIAVBKGogCBACQQJ0aiIALwEAOwAAIAVBKGogAC0AAhABIAQgAC0AA2ohBAwBCwsCQCAEIA5PDQAgBCAGIAVBKGogCBACIgBBAnRqIgItAAA6AAAgAi0AA0EBRgRAIAVBKGogAi0AAhABDAELIAUoAixBH0sNACAFQShqIAYgAEECdGotAAIQASAFKAIsQSFJDQAgBUEgNgIsCwNAQQAgAyAQSSAFQRBqEAQbBEAgAyAGIAVBEGogCBACQQJ0aiIALwEAOwAAIAVBEGogAC0AAhABIAMgAC0AA2oiACAGIAVBEGogCBACQQJ0aiICLwEAOwAAIAVBEGogAi0AAhABIAAgAi0AA2ohAwwBBSAPQX5qIQIDQCAFQRBqEAQgAyACS3JFBEAgAyAGIAVBEGogCBACQQJ0aiIALwEAOwAAIAVBEGogAC0AAhABIAMgAC0AA2ohAwwBCwsDQCADIAJNBEAgAyAGIAVBEGogCBACQQJ0aiIALwEAOwAAIAVBEGogAC0AAhABIAMgAC0AA2ohAwwBCwsCQCADIA9PDQAgAyAGIAVBEGogCBACIgBBAnRqIgItAAA6AAAgAi0AA0EBRgRAIAVBEGogAi0AAhABDAELIAUoAhRBH0sNACAFQRBqIAYgAEECdGotAAIQASAFKAIUQSFJDQAgBUEgNgIUCyABQWwgBUHYAGoQCiAFQUBrEApxIAVBKGoQCnEgBUEQahAKcRshCwwJCwAACwALAAALAAsAAAsACwAACwALQWwhCwsgBUHwAGokACALC7UEAQ5/IwBBEGsiBiQAIAZBBGogABAOQVQhBQJAIARB3AtJDQAgBi0ABCEHIANB8ARqQQBB7AAQECEIIAdBDEsNACADQdwJaiIJIAggBkEIaiAGQQxqIAEgAhAxIhAQA0UEQCAGKAIMIgQgB0sNASADQdwFaiEPIANBpAVqIREgAEEEaiESIANBqAVqIQEgBCEFA0AgBSICQX9qIQUgCCACQQJ0aigCAEUNAAsgAkEBaiEOQQEhBQNAIAUgDk9FBEAgCCAFQQJ0IgtqKAIAIQwgASALaiAKNgIAIAVBAWohBSAKIAxqIQoMAQsLIAEgCjYCAEEAIQUgBigCCCELA0AgBSALRkUEQCABIAUgCWotAAAiDEECdGoiDSANKAIAIg1BAWo2AgAgDyANQQF0aiINIAw6AAEgDSAFOgAAIAVBAWohBQwBCwtBACEBIANBADYCqAUgBEF/cyAHaiEJQQEhBQNAIAUgDk9FBEAgCCAFQQJ0IgtqKAIAIQwgAyALaiABNgIAIAwgBSAJanQgAWohASAFQQFqIQUMAQsLIAcgBEEBaiIBIAJrIgRrQQFqIQgDQEEBIQUgBCAIT0UEQANAIAUgDk9FBEAgBUECdCIJIAMgBEE0bGpqIAMgCWooAgAgBHY2AgAgBUEBaiEFDAELCyAEQQFqIQQMAQsLIBIgByAPIAogESADIAIgARBkIAZBAToABSAGIAc6AAYgACAGKAIENgIACyAQIQULIAZBEGokACAFC8ENAQt/IwBB8ABrIgUkAEFsIQkCQCADQQpJDQAgAi8AACEKIAIvAAIhDCACLwAEIQYgBUEIaiAEEA4CQCADIAYgCiAMampBBmoiDUkNACAFLQAKIQcgBUHYAGogAkEGaiICIAoQBiIJEAMNASAFQUBrIAIgCmoiAiAMEAYiCRADDQEgBUEoaiACIAxqIgIgBhAGIgkQAw0BIAVBEGogAiAGaiADIA1rEAYiCRADDQEgACABaiIOQX1qIQ8gBEEEaiEGQQEhCSAAIAFBA2pBAnYiAmoiCiACaiIMIAJqIg0hAyAMIQQgCiECA0AgCSADIA9JcQRAIAYgBUHYAGogBxACQQF0aiIILQAAIQsgBUHYAGogCC0AARABIAAgCzoAACAGIAVBQGsgBxACQQF0aiIILQAAIQsgBUFAayAILQABEAEgAiALOgAAIAYgBUEoaiAHEAJBAXRqIggtAAAhCyAFQShqIAgtAAEQASAEIAs6AAAgBiAFQRBqIAcQAkEBdGoiCC0AACELIAVBEGogCC0AARABIAMgCzoAACAGIAVB2ABqIAcQAkEBdGoiCC0AACELIAVB2ABqIAgtAAEQASAAIAs6AAEgBiAFQUBrIAcQAkEBdGoiCC0AACELIAVBQGsgCC0AARABIAIgCzoAASAGIAVBKGogBxACQQF0aiIILQAAIQsgBUEoaiAILQABEAEgBCALOgABIAYgBUEQaiAHEAJBAXRqIggtAAAhCyAFQRBqIAgtAAEQASADIAs6AAEgA0ECaiEDIARBAmohBCACQQJqIQIgAEECaiEAIAkgBUHYAGoQDUVxIAVBQGsQDUVxIAVBKGoQDUVxIAVBEGoQDUVxIQkMAQsLIAQgDUsgAiAMS3INAEFsIQkgACAKSw0BIApBfWohCQNAIAVB2ABqEAQgACAJT3JFBEAgBiAFQdgAaiAHEAJBAXRqIggtAAAhCyAFQdgAaiAILQABEAEgACALOgAAIAYgBUHYAGogBxACQQF0aiIILQAAIQsgBUHYAGogCC0AARABIAAgCzoAASAAQQJqIQAMAQsLA0AgBUHYAGoQBCAAIApPckUEQCAGIAVB2ABqIAcQAkEBdGoiCS0AACEIIAVB2ABqIAktAAEQASAAIAg6AAAgAEEBaiEADAELCwNAIAAgCkkEQCAGIAVB2ABqIAcQAkEBdGoiCS0AACEIIAVB2ABqIAktAAEQASAAIAg6AAAgAEEBaiEADAELCyAMQX1qIQADQCAFQUBrEAQgAiAAT3JFBEAgBiAFQUBrIAcQAkEBdGoiCi0AACEJIAVBQGsgCi0AARABIAIgCToAACAGIAVBQGsgBxACQQF0aiIKLQAAIQkgBUFAayAKLQABEAEgAiAJOgABIAJBAmohAgwBCwsDQCAFQUBrEAQgAiAMT3JFBEAgBiAFQUBrIAcQAkEBdGoiAC0AACEKIAVBQGsgAC0AARABIAIgCjoAACACQQFqIQIMAQsLA0AgAiAMSQRAIAYgBUFAayAHEAJBAXRqIgAtAAAhCiAFQUBrIAAtAAEQASACIAo6AAAgAkEBaiECDAELCyANQX1qIQADQCAFQShqEAQgBCAAT3JFBEAgBiAFQShqIAcQAkEBdGoiAi0AACEKIAVBKGogAi0AARABIAQgCjoAACAGIAVBKGogBxACQQF0aiICLQAAIQogBUEoaiACLQABEAEgBCAKOgABIARBAmohBAwBCwsDQCAFQShqEAQgBCANT3JFBEAgBiAFQShqIAcQAkEBdGoiAC0AACECIAVBKGogAC0AARABIAQgAjoAACAEQQFqIQQMAQsLA0AgBCANSQRAIAYgBUEoaiAHEAJBAXRqIgAtAAAhAiAFQShqIAAtAAEQASAEIAI6AAAgBEEBaiEEDAELCwNAIAVBEGoQBCADIA9PckUEQCAGIAVBEGogBxACQQF0aiIALQAAIQIgBUEQaiAALQABEAEgAyACOgAAIAYgBUEQaiAHEAJBAXRqIgAtAAAhAiAFQRBqIAAtAAEQASADIAI6AAEgA0ECaiEDDAELCwNAIAVBEGoQBCADIA5PckUEQCAGIAVBEGogBxACQQF0aiIALQAAIQIgBUEQaiAALQABEAEgAyACOgAAIANBAWohAwwBCwsDQCADIA5JBEAgBiAFQRBqIAcQAkEBdGoiAC0AACECIAVBEGogAC0AARABIAMgAjoAACADQQFqIQMMAQsLIAFBbCAFQdgAahAKIAVBQGsQCnEgBUEoahAKcSAFQRBqEApxGyEJDAELQWwhCQsgBUHwAGokACAJC8oCAQR/IwBBIGsiBSQAIAUgBBAOIAUtAAIhByAFQQhqIAIgAxAGIgIQA0UEQCAEQQRqIQIgACABaiIDQX1qIQQDQCAFQQhqEAQgACAET3JFBEAgAiAFQQhqIAcQAkEBdGoiBi0AACEIIAVBCGogBi0AARABIAAgCDoAACACIAVBCGogBxACQQF0aiIGLQAAIQggBUEIaiAGLQABEAEgACAIOgABIABBAmohAAwBCwsDQCAFQQhqEAQgACADT3JFBEAgAiAFQQhqIAcQAkEBdGoiBC0AACEGIAVBCGogBC0AARABIAAgBjoAACAAQQFqIQAMAQsLA0AgACADT0UEQCACIAVBCGogBxACQQF0aiIELQAAIQYgBUEIaiAELQABEAEgACAGOgAAIABBAWohAAwBCwsgAUFsIAVBCGoQChshAgsgBUEgaiQAIAILtgMBCX8jAEEQayIGJAAgBkEANgIMIAZBADYCCEFUIQQCQAJAIANBQGsiDCADIAZBCGogBkEMaiABIAIQMSICEAMNACAGQQRqIAAQDiAGKAIMIgcgBi0ABEEBaksNASAAQQRqIQogBkEAOgAFIAYgBzoABiAAIAYoAgQ2AgAgB0EBaiEJQQEhBANAIAQgCUkEQCADIARBAnRqIgEoAgAhACABIAU2AgAgACAEQX9qdCAFaiEFIARBAWohBAwBCwsgB0EBaiEHQQAhBSAGKAIIIQkDQCAFIAlGDQEgAyAFIAxqLQAAIgRBAnRqIgBBASAEdEEBdSILIAAoAgAiAWoiADYCACAHIARrIQhBACEEAkAgC0EDTQRAA0AgBCALRg0CIAogASAEakEBdGoiACAIOgABIAAgBToAACAEQQFqIQQMAAALAAsDQCABIABPDQEgCiABQQF0aiIEIAg6AAEgBCAFOgAAIAQgCDoAAyAEIAU6AAIgBCAIOgAFIAQgBToABCAEIAg6AAcgBCAFOgAGIAFBBGohAQwAAAsACyAFQQFqIQUMAAALAAsgAiEECyAGQRBqJAAgBAutAQECfwJAQYQgKAIAIABHIAAoAgBBAXYiAyABa0F4aiICQXhxQQhHcgR/IAIFIAMQJ0UNASACQQhqC0EQSQ0AIAAgACgCACICQQFxIAAgAWpBD2pBeHEiASAAa0EBdHI2AgAgASAANgIEIAEgASgCAEEBcSAAIAJBAXZqIAFrIgJBAXRyNgIAQYQgIAEgAkH/////B3FqQQRqQYQgKAIAIABGGyABNgIAIAEQJQsLygIBBX8CQAJAAkAgAEEIIABBCEsbZ0EfcyAAaUEBR2oiAUEESSAAIAF2cg0AIAFBAnRB/B5qKAIAIgJFDQADQCACQXhqIgMoAgBBAXZBeGoiBSAATwRAIAIgBUEIIAVBCEsbZ0Efc0ECdEGAH2oiASgCAEYEQCABIAIoAgQ2AgALDAMLIARBHksNASAEQQFqIQQgAigCBCICDQALC0EAIQMgAUEgTw0BA0AgAUECdEGAH2ooAgAiAkUEQCABQR5LIQIgAUEBaiEBIAJFDQEMAwsLIAIgAkF4aiIDKAIAQQF2QXhqIgFBCCABQQhLG2dBH3NBAnRBgB9qIgEoAgBGBEAgASACKAIENgIACwsgAigCACIBBEAgASACKAIENgIECyACKAIEIgEEQCABIAIoAgA2AgALIAMgAygCAEEBcjYCACADIAAQNwsgAwvhCwINfwV+IwBB8ABrIgckACAHIAAoAvDhASIINgJcIAEgAmohDSAIIAAoAoDiAWohDwJAAkAgBUUEQCABIQQMAQsgACgCxOABIRAgACgCwOABIREgACgCvOABIQ4gAEEBNgKM4QFBACEIA0AgCEEDRwRAIAcgCEECdCICaiAAIAJqQazQAWooAgA2AkQgCEEBaiEIDAELC0FsIQwgB0EYaiADIAQQBhADDQEgB0EsaiAHQRhqIAAoAgAQEyAHQTRqIAdBGGogACgCCBATIAdBPGogB0EYaiAAKAIEEBMgDUFgaiESIAEhBEEAIQwDQCAHKAIwIAcoAixBA3RqKQIAIhRCEIinQf8BcSEIIAcoAkAgBygCPEEDdGopAgAiFUIQiKdB/wFxIQsgBygCOCAHKAI0QQN0aikCACIWQiCIpyEJIBVCIIghFyAUQiCIpyECAkAgFkIQiKdB/wFxIgNBAk8EQAJAIAZFIANBGUlyRQRAIAkgB0EYaiADQSAgBygCHGsiCiAKIANLGyIKEAUgAyAKayIDdGohCSAHQRhqEAQaIANFDQEgB0EYaiADEAUgCWohCQwBCyAHQRhqIAMQBSAJaiEJIAdBGGoQBBoLIAcpAkQhGCAHIAk2AkQgByAYNwNIDAELAkAgA0UEQCACBEAgBygCRCEJDAMLIAcoAkghCQwBCwJAAkAgB0EYakEBEAUgCSACRWpqIgNBA0YEQCAHKAJEQX9qIgMgA0VqIQkMAQsgA0ECdCAHaigCRCIJIAlFaiEJIANBAUYNAQsgByAHKAJINgJMCwsgByAHKAJENgJIIAcgCTYCRAsgF6chAyALBEAgB0EYaiALEAUgA2ohAwsgCCALakEUTwRAIAdBGGoQBBoLIAgEQCAHQRhqIAgQBSACaiECCyAHQRhqEAQaIAcgB0EYaiAUQhiIp0H/AXEQCCAUp0H//wNxajYCLCAHIAdBGGogFUIYiKdB/wFxEAggFadB//8DcWo2AjwgB0EYahAEGiAHIAdBGGogFkIYiKdB/wFxEAggFqdB//8DcWo2AjQgByACNgJgIAcoAlwhCiAHIAk2AmggByADNgJkAkACQAJAIAQgAiADaiILaiASSw0AIAIgCmoiEyAPSw0AIA0gBGsgC0Egak8NAQsgByAHKQNoNwMQIAcgBykDYDcDCCAEIA0gB0EIaiAHQdwAaiAPIA4gESAQEB4hCwwBCyACIARqIQggBCAKEAcgAkERTwRAIARBEGohAgNAIAIgCkEQaiIKEAcgAkEQaiICIAhJDQALCyAIIAlrIQIgByATNgJcIAkgCCAOa0sEQCAJIAggEWtLBEBBbCELDAILIBAgAiAOayICaiIKIANqIBBNBEAgCCAKIAMQDxoMAgsgCCAKQQAgAmsQDyEIIAcgAiADaiIDNgJkIAggAmshCCAOIQILIAlBEE8EQCADIAhqIQMDQCAIIAIQByACQRBqIQIgCEEQaiIIIANJDQALDAELAkAgCUEHTQRAIAggAi0AADoAACAIIAItAAE6AAEgCCACLQACOgACIAggAi0AAzoAAyAIQQRqIAIgCUECdCIDQcAeaigCAGoiAhAXIAIgA0HgHmooAgBrIQIgBygCZCEDDAELIAggAhAMCyADQQlJDQAgAyAIaiEDIAhBCGoiCCACQQhqIgJrQQ9MBEADQCAIIAIQDCACQQhqIQIgCEEIaiIIIANJDQAMAgALAAsDQCAIIAIQByACQRBqIQIgCEEQaiIIIANJDQALCyAHQRhqEAQaIAsgDCALEAMiAhshDCAEIAQgC2ogAhshBCAFQX9qIgUNAAsgDBADDQFBbCEMIAdBGGoQBEECSQ0BQQAhCANAIAhBA0cEQCAAIAhBAnQiAmpBrNABaiACIAdqKAJENgIAIAhBAWohCAwBCwsgBygCXCEIC0G6fyEMIA8gCGsiACANIARrSw0AIAQEfyAEIAggABALIABqBUEACyABayEMCyAHQfAAaiQAIAwLkRcCFn8FfiMAQdABayIHJAAgByAAKALw4QEiCDYCvAEgASACaiESIAggACgCgOIBaiETAkACQCAFRQRAIAEhAwwBCyAAKALE4AEhESAAKALA4AEhFSAAKAK84AEhDyAAQQE2AozhAUEAIQgDQCAIQQNHBEAgByAIQQJ0IgJqIAAgAmpBrNABaigCADYCVCAIQQFqIQgMAQsLIAcgETYCZCAHIA82AmAgByABIA9rNgJoQWwhECAHQShqIAMgBBAGEAMNASAFQQQgBUEESBshFyAHQTxqIAdBKGogACgCABATIAdBxABqIAdBKGogACgCCBATIAdBzABqIAdB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IAdB0AFqJAAgEAslACAAQgA3AgAgAEEAOwEIIABBADoACyAAIAE2AgwgACACOgAKC7QFAQN/IwBBMGsiBCQAIABB/wFqIgVBfWohBgJAIAMvAQIEQCAEQRhqIAEgAhAGIgIQAw0BIARBEGogBEEYaiADEBwgBEEIaiAEQRhqIAMQHCAAIQMDQAJAIARBGGoQBCADIAZPckUEQCADIARBEGogBEEYahASOgAAIAMgBEEIaiAEQRhqEBI6AAEgBEEYahAERQ0BIANBAmohAwsgBUF+aiEFAn8DQEG6fyECIAMiASAFSw0FIAEgBEEQaiAEQRhqEBI6AAAgAUEBaiEDIARBGGoQBEEDRgRAQQIhAiAEQQhqDAILIAMgBUsNBSABIARBCGogBEEYahASOgABIAFBAmohA0EDIQIgBEEYahAEQQNHDQALIARBEGoLIQUgAyAFIARBGGoQEjoAACABIAJqIABrIQIMAwsgAyAEQRBqIARBGGoQEjoAAiADIARBCGogBEEYahASOgADIANBBGohAwwAAAsACyAEQRhqIAEgAhAGIgIQAw0AIARBEGogBEEYaiADEBwgBEEIaiAEQRhqIAMQHCAAIQMDQAJAIARBGGoQBCADIAZPckUEQCADIARBEGogBEEYahAROgAAIAMgBEEIaiAEQRhqEBE6AAEgBEEYahAERQ0BIANBAmohAwsgBUF+aiEFAn8DQEG6fyECIAMiASAFSw0EIAEgBEEQaiAEQRhqEBE6AAAgAUEBaiEDIARBGGoQBEEDRgRAQQIhAiAEQQhqDAILIAMgBUsNBCABIARBCGogBEEYahAROgABIAFBAmohA0EDIQIgBEEYahAEQQNHDQALIARBEGoLIQUgAyAFIARBGGoQEToAACABIAJqIABrIQIMAgsgAyAEQRBqIARBGGoQEToAAiADIARBCGogBEEYahAROgADIANBBGohAwwAAAsACyAEQTBqJAAgAgtpAQF/An8CQAJAIAJBB00NACABKAAAQbfIwuF+Rw0AIAAgASgABDYCmOIBQWIgAEEQaiABIAIQPiIDEAMNAhogAEKBgICAEDcDiOEBIAAgASADaiACIANrECoMAQsgACABIAIQKgtBAAsLrQMBBn8jAEGAAWsiAyQAQWIhCAJAIAJBCUkNACAAQZjQAGogAUEIaiIEIAJBeGogAEGY0AAQMyIFEAMiBg0AIANBHzYCfCADIANB/ABqIANB+ABqIAQgBCAFaiAGGyIEIAEgAmoiAiAEaxAVIgUQAw0AIAMoAnwiBkEfSw0AIAMoAngiB0EJTw0AIABBiCBqIAMgBkGAC0GADCAHEBggA0E0NgJ8IAMgA0H8AGogA0H4AGogBCAFaiIEIAIgBGsQFSIFEAMNACADKAJ8IgZBNEsNACADKAJ4IgdBCk8NACAAQZAwaiADIAZBgA1B4A4gBxAYIANBIzYCfCADIANB/ABqIANB+ABqIAQgBWoiBCACIARrEBUiBRADDQAgAygCfCIGQSNLDQAgAygCeCIHQQpPDQAgACADIAZBwBBB0BEgBxAYIAQgBWoiBEEMaiIFIAJLDQAgAiAFayEFQQAhAgNAIAJBA0cEQCAEKAAAIgZBf2ogBU8NAiAAIAJBAnRqQZzQAWogBjYCACACQQFqIQIgBEEEaiEEDAELCyAEIAFrIQgLIANBgAFqJAAgCAtGAQN/IABBCGohAyAAKAIEIQJBACEAA0AgACACdkUEQCABIAMgAEEDdGotAAJBFktqIQEgAEEBaiEADAELCyABQQggAmt0C4YDAQV/Qbh/IQcCQCADRQ0AIAItAAAiBEUEQCABQQA2AgBBAUG4fyADQQFGGw8LAn8gAkEBaiIFIARBGHRBGHUiBkF/Sg0AGiAGQX9GBEAgA0EDSA0CIAUvAABBgP4BaiEEIAJBA2oMAQsgA0ECSA0BIAItAAEgBEEIdHJBgIB+aiEEIAJBAmoLIQUgASAENgIAIAVBAWoiASACIANqIgNLDQBBbCEHIABBEGogACAFLQAAIgVBBnZBI0EJIAEgAyABa0HAEEHQEUHwEiAAKAKM4QEgACgCnOIBIAQQHyIGEAMiCA0AIABBmCBqIABBCGogBUEEdkEDcUEfQQggASABIAZqIAgbIgEgAyABa0GAC0GADEGAFyAAKAKM4QEgACgCnOIBIAQQHyIGEAMiCA0AIABBoDBqIABBBGogBUECdkEDcUE0QQkgASABIAZqIAgbIgEgAyABa0GADUHgDkGQGSAAKAKM4QEgACgCnOIBIAQQHyIAEAMNACAAIAFqIAJrIQcLIAcLrQMBCn8jAEGABGsiCCQAAn9BUiACQf8BSw0AGkFUIANBDEsNABogAkEBaiELIABBBGohCUGAgAQgA0F/anRBEHUhCkEAIQJBASEEQQEgA3QiB0F/aiIMIQUDQCACIAtGRQRAAkAgASACQQF0Ig1qLwEAIgZB//8DRgRAIAkgBUECdGogAjoAAiAFQX9qIQVBASEGDAELIARBACAKIAZBEHRBEHVKGyEECyAIIA1qIAY7AQAgAkEBaiECDAELCyAAIAQ7AQIgACADOwEAIAdBA3YgB0EBdmpBA2ohBkEAIQRBACECA0AgBCALRkUEQCABIARBAXRqLgEAIQpBACEAA0AgACAKTkUEQCAJIAJBAnRqIAQ6AAIDQCACIAZqIAxxIgIgBUsNAAsgAEEBaiEADAELCyAEQQFqIQQMAQsLQX8gAg0AGkEAIQIDfyACIAdGBH9BAAUgCCAJIAJBAnRqIgAtAAJBAXRqIgEgAS8BACIBQQFqOwEAIAAgAyABEBRrIgU6AAMgACABIAVB/wFxdCAHazsBACACQQFqIQIMAQsLCyEFIAhBgARqJAAgBQvjBgEIf0FsIQcCQCACQQNJDQACQAJAAkACQCABLQAAIgNBA3EiCUEBaw4DAwEAAgsgACgCiOEBDQBBYg8LIAJBBUkNAkEDIQYgASgAACEFAn8CQAJAIANBAnZBA3EiCEF+aiIEQQFNBEAgBEEBaw0BDAILIAVBDnZB/wdxIQQgBUEEdkH/B3EhAyAIRQwCCyAFQRJ2IQRBBCEGIAVBBHZB//8AcSEDQQAMAQsgBUEEdkH//w9xIgNBgIAISw0DIAEtAARBCnQgBUEWdnIhBEEFIQZBAAshBSAEIAZqIgogAksNAgJAIANBgQZJDQAgACgCnOIBRQ0AQQAhAgNAIAJBg4ABSw0BIAJBQGshAgwAAAsACwJ/IAlBA0YEQCABIAZqIQEgAEHw4gFqIQIgACgCDCEGIAUEQCACIAMgASAEIAYQXwwCCyACIAMgASAEIAYQXQwBCyAAQbjQAWohAiABIAZqIQEgAEHw4gFqIQYgAEGo0ABqIQggBQRAIAggBiADIAEgBCACEF4MAQsgCCAGIAMgASAEIAIQXAsQAw0CIAAgAzYCgOIBIABBATYCiOEBIAAgAEHw4gFqNgLw4QEgCUECRgRAIAAgAEGo0ABqNgIMCyAAIANqIgBBiOMBakIANwAAIABBgOMBakIANwAAIABB+OIBakIANwAAIABB8OIBakIANwAAIAoPCwJ/AkACQAJAIANBAnZBA3FBf2oiBEECSw0AIARBAWsOAgACAQtBASEEIANBA3YMAgtBAiEEIAEvAABBBHYMAQtBAyEEIAEQIUEEdgsiAyAEaiIFQSBqIAJLBEAgBSACSw0CIABB8OIBaiABIARqIAMQCyEBIAAgAzYCgOIBIAAgATYC8OEBIAEgA2oiAEIANwAYIABCADcAECAAQgA3AAggAEIANwAAIAUPCyAAIAM2AoDiASAAIAEgBGo2AvDhASAFDwsCfwJAAkACQCADQQJ2QQNxQX9qIgRBAksNACAEQQFrDgIAAgELQQEhByADQQN2DAILQQIhByABLwAAQQR2DAELIAJBBEkgARAhIgJBj4CAAUtyDQFBAyEHIAJBBHYLIQIgAEHw4gFqIAEgB2otAAAgAkEgahAQIQEgACACNgKA4gEgACABNgLw4QEgB0EBaiEHCyAHC0sAIABC+erQ0OfJoeThADcDICAAQgA3AxggAELP1tO+0ser2UI3AxAgAELW64Lu6v2J9eAANwMIIABCADcDACAAQShqQQBBKBAQGgviAgICfwV+IABBKGoiASAAKAJIaiECAn4gACkDACIDQiBaBEAgACkDECIEQgeJIAApAwgiBUIBiXwgACkDGCIGQgyJfCAAKQMgIgdCEol8IAUQGSAEEBkgBhAZIAcQGQwBCyAAKQMYQsXP2bLx5brqJ3wLIAN8IQMDQCABQQhqIgAgAk0EQEIAIAEpAAAQCSADhUIbiUKHla+vmLbem55/fkLj3MqV/M7y9YV/fCEDIAAhAQwBCwsCQCABQQRqIgAgAksEQCABIQAMAQsgASgAAK1Ch5Wvr5i23puef34gA4VCF4lCz9bTvtLHq9lCfkL5893xmfaZqxZ8IQMLA0AgACACSQRAIAAxAABCxc/ZsvHluuonfiADhUILiUKHla+vmLbem55/fiEDIABBAWohAAwBCwsgA0IhiCADhULP1tO+0ser2UJ+IgNCHYggA4VC+fPd8Zn2masWfiIDQiCIIAOFC+8CAgJ/BH4gACAAKQMAIAKtfDcDAAJAAkAgACgCSCIDIAJqIgRBH00EQCABRQ0BIAAgA2pBKGogASACECAgACgCSCACaiEEDAELIAEgAmohAgJ/IAMEQCAAQShqIgQgA2ogAUEgIANrECAgACAAKQMIIAQpAAAQCTcDCCAAIAApAxAgACkAMBAJNwMQIAAgACkDGCAAKQA4EAk3AxggACAAKQMgIABBQGspAAAQCTcDICAAKAJIIQMgAEEANgJIIAEgA2tBIGohAQsgAUEgaiACTQsEQCACQWBqIQMgACkDICEFIAApAxghBiAAKQMQIQcgACkDCCEIA0AgCCABKQAAEAkhCCAHIAEpAAgQCSEHIAYgASkAEBAJIQYgBSABKQAYEAkhBSABQSBqIgEgA00NAAsgACAFNwMgIAAgBjcDGCAAIAc3AxAgACAINwMICyABIAJPDQEgAEEoaiABIAIgAWsiBBAgCyAAIAQ2AkgLCy8BAX8gAEUEQEG2f0EAIAMbDwtBun8hBCADIAFNBH8gACACIAMQEBogAwVBun8LCy8BAX8gAEUEQEG2f0EAIAMbDwtBun8hBCADIAFNBH8gACACIAMQCxogAwVBun8LC6gCAQZ/IwBBEGsiByQAIABB2OABaikDAEKAgIAQViEIQbh/IQUCQCAEQf//B0sNACAAIAMgBBBCIgUQAyIGDQAgACgCnOIBIQkgACAHQQxqIAMgAyAFaiAGGyIKIARBACAFIAYbayIGEEAiAxADBEAgAyEFDAELIAcoAgwhBCABRQRAQbp/IQUgBEEASg0BCyAGIANrIQUgAyAKaiEDAkAgCQRAIABBADYCnOIBDAELAkACQAJAIARBBUgNACAAQdjgAWopAwBCgICACFgNAAwBCyAAQQA2ApziAQwBCyAAKAIIED8hBiAAQQA2ApziASAGQRRPDQELIAAgASACIAMgBSAEIAgQOSEFDAELIAAgASACIAMgBSAEIAgQOiEFCyAHQRBqJAAgBQtnACAAQdDgAWogASACIAAoAuzhARAuIgEQAwRAIAEPC0G4fyECAkAgAQ0AIABB7OABaigCACIBBEBBYCECIAAoApjiASABRw0BC0EAIQIgAEHw4AFqKAIARQ0AIABBkOEBahBDCyACCycBAX8QVyIERQRAQUAPCyAEIAAgASACIAMgBBBLEE8hACAEEFYgAAs/AQF/AkACQAJAIAAoAqDiAUEBaiIBQQJLDQAgAUEBaw4CAAECCyAAEDBBAA8LIABBADYCoOIBCyAAKAKU4gELvAMCB38BfiMAQRBrIgkkAEG4fyEGAkAgBCgCACIIQQVBCSAAKALs4QEiBRtJDQAgAygCACIHQQFBBSAFGyAFEC8iBRADBEAgBSEGDAELIAggBUEDakkNACAAIAcgBRBJIgYQAw0AIAEgAmohCiAAQZDhAWohCyAIIAVrIQIgBSAHaiEHIAEhBQNAIAcgAiAJECwiBhADDQEgAkF9aiICIAZJBEBBuH8hBgwCCyAJKAIAIghBAksEQEFsIQYMAgsgB0EDaiEHAn8CQAJAAkAgCEEBaw4CAgABCyAAIAUgCiAFayAHIAYQSAwCCyAFIAogBWsgByAGEEcMAQsgBSAKIAVrIActAAAgCSgCCBBGCyIIEAMEQCAIIQYMAgsgACgC8OABBEAgCyAFIAgQRQsgAiAGayECIAYgB2ohByAFIAhqIQUgCSgCBEUNAAsgACkD0OABIgxCf1IEQEFsIQYgDCAFIAFrrFINAQsgACgC8OABBEBBaiEGIAJBBEkNASALEEQhDCAHKAAAIAynRw0BIAdBBGohByACQXxqIQILIAMgBzYCACAEIAI2AgAgBSABayEGCyAJQRBqJAAgBgsuACAAECsCf0EAQQAQAw0AGiABRSACRXJFBEBBYiAAIAEgAhA9EAMNARoLQQALCzcAIAEEQCAAIAAoAsTgASABKAIEIAEoAghqRzYCnOIBCyAAECtBABADIAFFckUEQCAAIAEQWwsL0QIBB38jAEEQayIGJAAgBiAENgIIIAYgAzYCDCAFBEAgBSgCBCEKIAUoAgghCQsgASEIAkACQANAIAAoAuzhARAWIQsCQANAIAQgC0kNASADKAAAQXBxQdDUtMIBRgRAIAMgBBAiIgcQAw0EIAQgB2shBCADIAdqIQMMAQsLIAYgAzYCDCAGIAQ2AggCQCAFBEAgACAFEE5BACEHQQAQA0UNAQwFCyAAIAogCRBNIgcQAw0ECyAAIAgQUCAMQQFHQQAgACAIIAIgBkEMaiAGQQhqEEwiByIDa0EAIAMQAxtBCkdyRQRAQbh/IQcMBAsgBxADDQMgAiAHayECIAcgCGohCEEBIQwgBigCDCEDIAYoAgghBAwBCwsgBiADNgIMIAYgBDYCCEG4fyEHIAQNASAIIAFrIQcMAQsgBiADNgIMIAYgBDYCCAsgBkEQaiQAIAcLRgECfyABIAAoArjgASICRwRAIAAgAjYCxOABIAAgATYCuOABIAAoArzgASEDIAAgATYCvOABIAAgASADIAJrajYCwOABCwutAgIEfwF+IwBBQGoiBCQAAkACQCACQQhJDQAgASgAAEFwcUHQ1LTCAUcNACABIAIQIiEBIABCADcDCCAAQQA2AgQgACABNgIADAELIARBGGogASACEC0iAxADBEAgACADEBoMAQsgAwRAIABBuH8QGgwBCyACIAQoAjAiA2shAiABIANqIQMDQAJAIAAgAyACIARBCGoQLCIFEAMEfyAFBSACIAVBA2oiBU8NAUG4fwsQGgwCCyAGQQFqIQYgAiAFayECIAMgBWohAyAEKAIMRQ0ACyAEKAI4BEAgAkEDTQRAIABBuH8QGgwCCyADQQRqIQMLIAQoAighAiAEKQMYIQcgAEEANgIEIAAgAyABazYCACAAIAIgBmytIAcgB0J/URs3AwgLIARBQGskAAslAQF/IwBBEGsiAiQAIAIgACABEFEgAigCACEAIAJBEGokACAAC30BBH8jAEGQBGsiBCQAIARB/wE2AggCQCAEQRBqIARBCGogBEEMaiABIAIQFSIGEAMEQCAGIQUMAQtBVCEFIAQoAgwiB0EGSw0AIAMgBEEQaiAEKAIIIAcQQSIFEAMNACAAIAEgBmogAiAGayADEDwhBQsgBEGQBGokACAFC4cBAgJ/An5BABAWIQMCQANAIAEgA08EQAJAIAAoAABBcHFB0NS0wgFGBEAgACABECIiAhADRQ0BQn4PCyAAIAEQVSIEQn1WDQMgBCAFfCIFIARUIQJCfiEEIAINAyAAIAEQUiICEAMNAwsgASACayEBIAAgAmohAAwBCwtCfiAFIAEbIQQLIAQLPwIBfwF+IwBBMGsiAiQAAn5CfiACQQhqIAAgARAtDQAaQgAgAigCHEEBRg0AGiACKQMICyEDIAJBMGokACADC40BAQJ/IwBBMGsiASQAAkAgAEUNACAAKAKI4gENACABIABB/OEBaigCADYCKCABIAApAvThATcDICAAEDAgACgCqOIBIQIgASABKAIoNgIYIAEgASkDIDcDECACIAFBEGoQGyAAQQA2AqjiASABIAEoAig2AgggASABKQMgNwMAIAAgARAbCyABQTBqJAALKgECfyMAQRBrIgAkACAAQQA2AgggAEIANwMAIAAQWCEBIABBEGokACABC4cBAQN/IwBBEGsiAiQAAkAgACgCAEUgACgCBEVzDQAgAiAAKAIINgIIIAIgACkCADcDAAJ/IAIoAgAiAQRAIAIoAghBqOMJIAERBQAMAQtBqOMJECgLIgFFDQAgASAAKQIANwL04QEgAUH84QFqIAAoAgg2AgAgARBZIAEhAwsgAkEQaiQAIAMLywEBAn8jAEEgayIBJAAgAEGBgIDAADYCtOIBIABBADYCiOIBIABBADYC7OEBIABCADcDkOIBIABBADYCpOMJIABBADYC3OIBIABCADcCzOIBIABBADYCvOIBIABBADYCxOABIABCADcCnOIBIABBpOIBakIANwIAIABBrOIBakEANgIAIAFCADcCECABQgA3AhggASABKQMYNwMIIAEgASkDEDcDACABKAIIQQh2QQFxIQIgAEEANgLg4gEgACACNgKM4gEgAUEgaiQAC3YBA38jAEEwayIBJAAgAARAIAEgAEHE0AFqIgIoAgA2AiggASAAKQK80AE3AyAgACgCACEDIAEgAigCADYCGCABIAApArzQATcDECADIAFBEGoQGyABIAEoAig2AgggASABKQMgNwMAIAAgARAbCyABQTBqJAALzAEBAX8gACABKAK00AE2ApjiASAAIAEoAgQiAjYCwOABIAAgAjYCvOABIAAgAiABKAIIaiICNgK44AEgACACNgLE4AEgASgCuNABBEAgAEKBgICAEDcDiOEBIAAgAUGk0ABqNgIMIAAgAUGUIGo2AgggACABQZwwajYCBCAAIAFBDGo2AgAgAEGs0AFqIAFBqNABaigCADYCACAAQbDQAWogAUGs0AFqKAIANgIAIABBtNABaiABQbDQAWooAgA2AgAPCyAAQgA3A4jhAQs7ACACRQRAQbp/DwsgBEUEQEFsDwsgAiAEEGAEQCAAIAEgAiADIAQgBRBhDwsgACABIAIgAyAEIAUQZQtGAQF/IwBBEGsiBSQAIAVBCGogBBAOAn8gBS0ACQRAIAAgASACIAMgBBAyDAELIAAgASACIAMgBBA0CyEAIAVBEGokACAACzQAIAAgAyAEIAUQNiIFEAMEQCAFDwsgBSAESQR/IAEgAiADIAVqIAQgBWsgABA1BUG4fwsLRgEBfyMAQRBrIgUkACAFQQhqIAQQDgJ/IAUtAAkEQCAAIAEgAiADIAQQYgwBCyAAIAEgAiADIAQQNQshACAFQRBqJAAgAAtZAQF/QQ8hAiABIABJBEAgAUEE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';\n// wasm:end\n\nexport { ZSTDDecoder };\n//# sourceMappingURL=zstddec.modern.js.map\n","import { inflate } from 'pako';\nimport Lerc from 'lerc';\nimport { ZSTDDecoder } from 'zstddec';\nimport BaseDecoder from './basedecoder.js';\nimport { LercParameters, LercAddCompression } from '../globals.js';\n\nexport const zstd = new ZSTDDecoder();\n\nexport default class LercDecoder extends BaseDecoder {\n  constructor(fileDirectory) {\n    super();\n\n    this.planarConfiguration = typeof fileDirectory.PlanarConfiguration !== 'undefined' ? fileDirectory.PlanarConfiguration : 1;\n    this.samplesPerPixel = typeof fileDirectory.SamplesPerPixel !== 'undefined' ? fileDirectory.SamplesPerPixel : 1;\n\n    this.addCompression = fileDirectory.LercParameters[LercParameters.AddCompression];\n  }\n\n  decodeBlock(buffer) {\n    switch (this.addCompression) {\n      case LercAddCompression.None:\n        break;\n      case LercAddCompression.Deflate:\n        buffer = inflate(new Uint8Array(buffer)).buffer; // eslint-disable-line no-param-reassign, prefer-destructuring\n        break;\n      case LercAddCompression.Zstandard:\n        buffer = zstd.decode(new Uint8Array(buffer)).buffer; // eslint-disable-line no-param-reassign, prefer-destructuring\n        break;\n      default:\n        throw new Error(`Unsupported LERC additional compression method identifier: ${this.addCompression}`);\n    }\n\n    const lercResult = Lerc.decode(buffer, { returnPixelInterleavedDims: this.planarConfiguration === 1 });\n    const lercData = lercResult.pixels[0];\n    return lercData.buffer;\n  }\n}\n"],"names":["LercDecode","CntZImage","input","options","skipMask","parsedData","parse","noDataValue","uncompressedData","uncompressPixelValues","result","formatFileInfo","computeUsedBitDepths","data","TypedArrayClass","maskBitset","storeDecodedMask","blockIdx","numX","numY","blockWidth","blockHeight","scale","minValue","currentValue","resultPixels","resultMask","blockDataBuffer","xx","yy","y","thisBlockHeight","x","thisBlockWidth","outPtr","outStride","block","blockData","blockPtr","constValue","unstuff","maskByte","numBlocks","bitDepths","i","fp","fileIdView","view","bitset","cnt","ip","op","val","numBlocksX","numBlocksY","actualNumBlocksX","actualNumBlocksY","blockI","blockY","blockX","size","bytesLeft","headerByte","arrayBuf","store8","numPixels","rawData","dataBytes","dataWords","src","bitsPerPixel","offset","dest","maxValue","bitMask","o","bitsLeft","n","buffer","nmax","numInvalidTailBytes","missingBits","Lerc2Decode","BitStuffer","lutArr","bitPos","Lerc2Helpers","sum1","sum2","len","words","tlen","ptr","headerInfo","fileVersion","checksum","keyLength","OutPixelTypeArray","rangeBytes","minValues","maxValues","equal","numBytes","numValidPixel","mask","mb","k","useBSQForOutputDim","numDims","imageType","z","nStart","BITS_MAX","version","i0","i1","codeTable","j","stuffedData","word","srcPtr","numBitsLUT","numBitsLUTQick","tree","TreeNode","decodeLut","entry","code","numEntries","jj","currentBit","node","height","width","huffmanInfo","delta","valTmp","valTmpQuick","ii","prevVal","deltaEncode","resultPixelsAllDim","iDim","viewByteLength","bits67","doLut","numBits","numElements","lutData","lutBytes","zMax","microBlockSize","dataTypeSize","row","col","testCode","bytesleft","blockEncoding","lastBlockHeight","lastBlockWidth","offsetType","fileVersionCheckNum","isDiffEncoding","resultPixelsPrevDim","valMin","t","tp","isValid","s","dt","tc","temp","pixels","inputIsBIP","swap","left","right","bReadDataOneSweep","flagHuffman","diff","count","isPlatformLittleEndian","a","b","c","Lerc","encodedData","inputOffset","fileIdentifierString","lerc","majorVersion","iPlane","eof","encodedMaskData","bandMasks","bandMask","maskData","decodedPixelBlock","uniqueBandMaskCount","module","init","instance","heap","IMPORT_OBJECT","index","ZSTDDecoder","wasm","response","arrayBuffer","array","uncompressedSize","compressedSize","compressedPtr","uncompressedPtr","actualSize","dec","zstd","LercDecoder","BaseDecoder","fileDirectory","LercParameters","LercAddCompression","inflate"],"mappings":"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","x_google_ignoreList":[0,1,2]}